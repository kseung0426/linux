--REST Endpoint
//시험처
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisTestUnitinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def groupCode=queryParams.getFirst("qdata")as String 
    def rt=[:]
    log.debug(groupCode)
    try{
        if ( groupCode == null ){
            return Response.ok(new JsonBuilder([groupCode: "", error: "Error in param gubun"]).toString()).build()
        }
        
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestUnit.do?groupCode=${groupCode}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestUnit.do?groupCode=${groupCode}"

        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['nameEng']
            log.debug("testUnitItem Total은?" + rows)
            log.debug("testUnitItem Total2은?" + rows['nameEng'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList)
        }catch (Exception e){
            
            newList = new ArrayList<>()
            newList.add("시험처에 맞는 Block List가 없습니다.")
                
        }
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
               
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 시험처 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//시험항목
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisTestIteminfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def groupCode=queryParams.getFirst("groupcode")as String 
    def fqid=queryParams.getFirst("fqid")as String
    def rt=[:]
    try{
        if (groupCode == null){
            return Response.ok(new JsonBuilder([groupCode: "", error: "Error in param groupCode"]).toString()).build()
        }
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }

        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestItem.do?groupCode=${groupCode}&nameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestItem.do?groupCode=${groupCode}&nameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getJiraTestItem.do?fqid=CS&groupCode=25"
        String params = URLEncoder.encode(fqid, "UTF-8");
    
        def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['itemNameEng']
            //log.debug("testUnitItem Total은?" + rows)
            //log.debug("testUnitItem Total2은?" + rows['itemNameEng'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("There is no Block value for test name.")          
        }

        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 시험항목 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//대책분류
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisSolutioninfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def qdata=queryParams.getFirst("qdata")as String 
    //def type=queryParams.getFirst("type")as String
    def rt=[:]
    try{
        if (qdata == null){
            return Response.ok(new JsonBuilder([qdata: "", error: "Error in param groupCode"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolutionInfo.do?groupCode=${qdata}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisSolutionInfo.do?groupCode=${qdata}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisSolutionInfo.do?groupCode=11"
        //String params = URLEncoder.encode(type, "UTF-8");
    
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['solveNameEng']
            //log.debug("solveNameEng Total은?" + rows)
            //log.debug("solveNameEng Total2은?" + rows['itemNameEng'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("시험항목에 맞는 대책분류가 없습니다.")            
        }

        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 대책분류 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//세부블락
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisDetailBlockinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def rt=[:]
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisDetailBlockInfo.do?sloveNameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisDetailBlockInfo.do?sloveNameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisDetailBlockInfo.do?fqid=Main"
        String params = URLEncoder.encode(fqid, "UTF-8");
    
        def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['blockNameEng']
            //log.debug("blockNameEng Total은?" + rows)
            //log.debug("blockNameEng Total2은?" + rows['itemNameEng'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("시험항목에 맞는 세부block이 없습니다.")       
        }

        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 세부block (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//발생block
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisOccurBlockinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def qdata=queryParams.getFirst("gubun")as String
    def occurBlock=queryParams.getFirst("occurBlock")as String
    def feature=queryParams.getFirst("feature")as String
    def rt=[:]
    
    log.debug(occurBlock);
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if (qdata == null){
            return Response.ok(new JsonBuilder([qdata: "", error: "Error in param qdata"]).toString()).build()
        }
        
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisOccurBlockInfo.do?groupCode=${qdata}&defectType="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurBlockInfo.do?groupCode=${qdata}&defectType="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurBlockInfo.do?defectType=HW&groupCode=11"
        String params = URLEncoder.encode(fqid, "UTF-8");

        def apiurl = url + params
        def http = new HTTPBuilder(apiurl)
        def rows
        log.debug(apiurl);
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        List<String> newList = new ArrayList<>()
        def testItem = [:]
        def totalVal = []
        def blockList
        
            try{
                def functionBlock = rows['blockNameEng']
                newList = functionBlock.stream().distinct().collect(Collectors.toList())
                log.debug(newList);
            }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("Occurr. Block에 맞는 Block List가 없습니다.")
            }
            for ( def list in newList ){
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Block (${totalVal.size()})... " 
        //log.debug(rt)
                            
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//feature
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisFeatureinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def groupcode=queryParams.getFirst("gubun")as String 
    def feature=queryParams.getFirst("feature")as String
    def rt=[:]

    log.debug(feature);
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if (groupcode == null){
            return Response.ok(new JsonBuilder([groupcode: "", error: "Error in param groupcode"]).toString()).build()
        }

        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisFeatureInfo.do?groupCode=${groupcode}&blockNameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFeatureInfo.do?groupCode=${groupcode}&blockNameEng="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFeatureInfo.do?blockNameEng=Main&groupCode=11"
        String params = URLEncoder.encode(fqid, "UTF-8");

        def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def featureList
        List<String> newList = new ArrayList<>()
            try{
                def functionBlock = rows['featureNameEng']
                newList = functionBlock.stream().distinct().collect(Collectors.toList())
                log.debug(newList);
            }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("feature에 맞는 Block List가 없습니다.")
                }else{
                    newList.add("There is no Block value for feature")
                }
            }

            for ( def list in newList ){
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }
            rt.items = totalVal
            rt.total = totalVal.size()
            rt.footer = "Choose Block (${totalVal.size()})... " 
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//moblie 과제명
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLDecoder;
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newModelcodeEndPoint(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    String modelcode=queryParams.getFirst("modelcode")as String
    def rt=[:]
    def result = []
    def value = ""
    try{
        if (modelcode == null){
            return Response.ok(new JsonBuilder([modelcode: "", error: "Error in param modelcode"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisPjtName.do?modelCode='"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisPjtName.do?modelCode='"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisMobilePjtName.do?modelCode=%27NPFUNCT07%27"
        String params = URLEncoder.encode(modelcode, "UTF-8");

        def apiurl = url + params + "'"
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['prjName']
            //log.debug("prjname Total은?" + rows)
            log.debug("prjName Total2은?" + rows['prjName'])
            log.debug(rows['prjName'].size())
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            value = newList[0].toString()
            log.debug("value는??" + value)
            //log.debug("새로운리스트 보여줘" + newList);
            
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("시험항목에 맞는 과제명이 없습니다.")   
        }
        
        if (value != null && value != "null"){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            result.add(encodedResult)
            //log.debug(testItem)
            //log.debug(totalVal)
        } 
        
        // rt.items = totalVal
        // rt.total = totalVal.size()
        // rt.footer = "Choose 과제명 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(result).toString()).build();
}

//mobile 시험처
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisTestPlaceinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def testType = queryParams.getFirst("testType")as String
    def language = queryParams.getFirst("language")as String
    def testPlaceVal = queryParams.getFirst("testPlaceVal")as String
    def server = queryParams.getFirst("server")as String
    def rt=[:]
    def url =""
    def select = ""
    def params = ""
    try{
        log.debug(testType);
        log.debug(language);
        log.debug(server);
        if ( testType == null ){
            return Response.ok(new JsonBuilder([testType: "", error: "Error in param testType"]).toString()).build()
        }
        if ( language == null ){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestTypeUnit.do?language=KR&testType='${testType}'"      
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestTypeUnit.do?language=KR&testType='${testType}'"      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestTypeUnit.do?language=EN&testType='${testType}'"
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestTypeUnit.do?language=EN&testType='${testType}'"
        }
        if (server != null){
            params = "&server=DEV"
        }
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestTypeUnit.do?language=KR&testType=%27DEV%27"
        //String params = URLEncoder.encode(testType, "UTF-8");
        
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        def testUnitItem = []
        List<String> newList = new ArrayList<>()

        try{
            if (language == "KR"){
                testUnitItem = rows['nameKor'] 
            }else{
                testUnitItem = rows['nameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("시험처에 맞는 Block List가 없습니다.")
                }else{
                    newList.add("There is no Block value for test place.")
                }
                
        }
        for ( def list in newList ){
            if ( testPlaceVal == null ){
                log.debug(list)
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }else{
                if ( list == testPlaceVal ) {
                    log.debug(list)
                    totalVal.add(list)  
                    //log.debug(totalVal)
                }
            }
        }

        if ( testPlaceVal == null ) {
            rt.items = totalVal
            rt.total = totalVal.size()
            rt.footer = "Choose 시험처 (${totalVal.size()})... " 
            //log.debug(rt)
        }else{
            rt = totalVal
        }
       
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 시험분류
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisTestCategoryinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def testPlace=queryParams.getFirst("testPlace")as String
    def fqid = queryParams.getFirst("fqid")as String
    def language = queryParams.getFirst("language")as String
    def testType=queryParams.getFirst("testType")as String
    def rt=[:]
    def url = ""
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if ( language == null ){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        log.debug(fqid);
        log.debug(testPlace);
        log.debug(testType);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestCategory.do?language=KR&name="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestCategory.do?language=KR&name="
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestCategory.do?language=EN&name="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestCategory.do?language=EN&name="
        }

        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestCategory.do?language=KR&name=전문기술(자주)"
        String params = URLEncoder.encode(fqid, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");

        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []

        try{
            if (language == "KR"){
                testUnitItem = rows['categoryNameKor'] 
            }else{
                testUnitItem = rows['categoryNameEng']
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                log.debug(newList.size());

        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("시험분류에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for test type.")
                }            
        }

        if(newList.size() > 0){
            for ( def list in newList ){
                if (testType == null){
                    log.debug(list)
                    testItem = [:]
                    testItem.put("value",list)
                    testItem.put("label",list)
                    //log.debug(testItem)
                    totalVal.add(testItem)  
                    //log.debug(totalVal)
                }else{
                    if (list == testType){
                        log.debug(list);
                        totalVal.add(list)
                    }
                }
            }
        }else{
            testItem = [:]
            testItem.put("value","W/W")
            testItem.put("label","W/W")
            totalVal.add(testItem)  
        }

        if (testType == null){
            rt.items = totalVal
            rt.total = totalVal.size()
            rt.footer = "Choose 시험분류 (${totalVal.size()})... " 
            //log.debug(rt)
        }else{
            rt = totalVal
        }
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 현상분류
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisFailureTypeinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if ( language == null ){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisFailureType.do?language=KR&unitName="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFailureType.do?language=KR&unitName="
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisFailureType.do?language=EN&unitName="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFailureType.do?language=EN&unitName="
        }

        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFailureType.do?language=KR&unitName=Camera공정"
        String params = URLEncoder.encode(fqid, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");

        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []

        try{
            if (language == "KR"){
                testUnitItem = rows['failureNameKor'] 
            }else{
                testUnitItem = rows['failureNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());

        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("현상분류에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Appearance ClassificationRequired.")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 현상분류 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 세부현상
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisDetailedFailureinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if ( language == null ){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        log.debug(language);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisDetailProblemType.do?language=KR&failureName="      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisDetailProblemType.do?language=EN&failureName="
        }

        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisDetailProblemType.do?language=KR&failureName=Act (Wide/Tele)"
        String params = URLEncoder.encode(fqid, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");

        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []

        try{
            if (language == "KR"){
                testUnitItem = rows['detailProblemNameKor'] 
            }else{
                testUnitItem = rows['detailProblemNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());

        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("세부현상에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Detailed Failure SituationRequired.")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 세부현상 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 발생유형
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisOccurTypeinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        if (fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if ( language == null ){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        log.debug(language);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisOccurType.do?language=KR&unitName="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurType.do?language=KR&unitName="
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisOccurType.do?language=EN&unitName="
            //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurType.do?language=EN&unitName="
        }

        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurType.do?language=EN&unitName=Camera Process Techonolgy"
        String params = URLEncoder.encode(fqid, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");

        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []

        try{
            if (language == "KR"){
                testUnitItem = rows['occurTypeNameKor'] 
            }else{
                testUnitItem = rows['occurTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());

        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("발생유형에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Occurr. TypeRequired")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 발생유형 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 발생block
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisMWOccurBlockinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def feature=queryParams.getFirst("feature")as String
    def gubun=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String
    def blockName=queryParams.getFirst("blockName")as String
    
    def rt=[:]
    try{
        if (gubun == null){
            return Response.ok(new JsonBuilder([gubun: "", error: "Error in param gubun"]).toString()).build()
        }
        if (feature == null){
            return Response.ok(new JsonBuilder([feature: "", error: "Error in param feature"]).toString()).build()
        }
        log.debug(gubun);
        log.debug(feature);
        
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisFunctionBlock.do?groupCode=${gubun}&featureName="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFunctionBlock.do?groupCode=${gubun}&featureName="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisFunctionBlock.do?groupCode=25&featureName=KNOX"
        String params = URLEncoder.encode(feature, "UTF-8");

        def apiurl = url + params
        def http = new HTTPBuilder(apiurl)
        def rows
        log.debug(apiurl);
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        List<String> newList = new ArrayList<>()
        def testItem = [:]
        def totalVal = []
        def blockList
        
            try{
                def functionBlock = rows['blockNameEng']
                newList = functionBlock.stream().distinct().collect(Collectors.toList())
                log.debug(newList);
            }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("Occurr. Block에 맞는 Block List가 없습니다.")
                }else{
                    newList.add("There is no Block value for Occurr. Block")
                }        
            }
            for ( def list in newList ){
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Block (${totalVal.size()})... " 
        log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }

    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile feature
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript CustomEndpointDelegate delegate

newEventQisMWFeatureinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language = queryParams.getFirst("language")as String
    //def divisionCode = queryParams.getFirst("issueTypeName")as String
    def rt=[:]
    try{
        if (fqid == null){
            //return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
            fqid = "25"
        }
        //if ( divisionCode == null ){
        //    divisionCode = "25"
        //}
        //log.debug("divisionCode?" + divisionCode);
        log.debug("fqid?" + fqid);

        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisDetailFunctionclass.do?groupCode=${fqid}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisDetailFunctionclass.do?groupCode=${fqid}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisDetailFunctionclass.do?groupCode=25"

        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def featureList
        List<String> newList = new ArrayList<>()
            try{
                def functionBlock = rows['featureNameEng']
                newList = functionBlock.stream().distinct().collect(Collectors.toList())
                log.debug(newList);
            }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("feature에 맞는 Block List가 없습니다.")
                }else{
                    newList.add("There is no Block value for feature")
                }
            }

            for ( def list in newList ){
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose feature (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//mobile 시험항목
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisTestNameInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def testPlace=queryParams.getFirst("testPlace")as String
    def testType=queryParams.getFirst("testType")as String
    //testName추가
    def testName=queryParams.getFirst("testName")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        if (testPlace == null){
            return Response.ok(new JsonBuilder([testPlace: "", error: "Error in param testPlace"]).toString()).build()
        }
        if (testType == null){
            return Response.ok(new JsonBuilder([testType: "", error: "Error in param testType"]).toString()).build()
        }
        
        log.debug(testPlace);
        log.debug(testType);
        log.debug(testName);
        
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestItemName.do?testType=W/W&language=KR&name="
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestItemName.do?testType=W/W&language=E&name="
        }
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisTestItemName.do?testType=W/W&language=E&name=Global%20VOC(Goods)"
        //def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisTestItemName.do?testType=W/W&language=E&name="
        String params = URLEncoder.encode(testPlace, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['itemNameKor'] 
            }else{
                testUnitItem = rows['itemNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("시험항목에 맞는 세부block이 없습니다.")            
        }
        
        for ( def list in newList ){
            if (testName == null){
                log.debug(list)
                testItem = [:]
                testItem.put("value",list)
                testItem.put("label",list)
                //log.debug(testItem)
                totalVal.add(testItem)  
                //log.debug(totalVal)
            }else{
                if (list == testName){
                    log.debug(list);
                    totalVal.add(list)
                }
            }
        }
        
        if (testName == null){
            rt.items = totalVal
            rt.total = totalVal.size()
            rt.footer = "Choose 시험항목 (${totalVal.size()})... " 
            //log.debug(rt)
        }else{
            rt = totalVal
        }
        
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//mobile 검토부서
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisReviewerDeptInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def qdata=queryParams.getFirst("qdata")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    try{
        // if (qdata == null){
        //     return Response.ok(new JsonBuilder([qdata: "", error: "Error in param qdata"]).toString()).build()
        // }
        log.debug(language);
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisReviewDept.do"
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['nameKor'] 
            }else{
                testUnitItem = rows['nameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("검토부서에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Reviewer Dept.")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 검토부서 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//ResolveOption(소)필드
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisResolveOptioninfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def mid=queryParams.getFirst("mid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        if (mid == null){
            return Response.ok(new JsonBuilder([mid: "", error: "Error in param mid"]).toString()).build()
        }
        log.debug(mid);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisResolveOptionLow.do?language=KR&upresolveName="      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisResolveOptionLow.do?language=EN&upresolveName="
        }
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisResolveOptionLow.do?language=KR&upresolveName=현상태%20유지"
        String params = URLEncoder.encode(mid, "UTF-8");
        //String params = URLDecoder.decode(fqid, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['resolveStatusNameKor'] 
            }else{
                testUnitItem = rows['resolveStatusNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("Resolve Option(소)에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Resolve Option(Low)")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Resolve Option(소) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//ResolveOption(중)
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisResolveOptionMidInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    try{
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisResolveOptionMid.do"
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['resolveStatusNameKor'] 
            }else{
                testUnitItem = rows['resolveStatusNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("Resolve Option(중)에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Resolve Option(Mid)")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Resolve Option(중) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//mobile 프로젝트 언어 조회
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLDecoder;
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
projectLanguage(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def jiraprojectkey = queryParams.getFirst("jiraprojectkey")as String //workplacenumber
    def rt=[:]
    def result = []
    def value = ""
    try{
        if (jiraprojectkey == null){
            return Response.ok(new JsonBuilder([jiraprojectkey: "", error: "Error in param jiraprojectkey"]).toString()).build()
        }
        log.debug(jiraprojectkey);
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisNationCode.do?jiraProjectKey="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisNationCode.do?jiraProjectKey=QI2410250082301001"
        String params = URLEncoder.encode(jiraprojectkey, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['nationCode']
            log.debug("nationCode?" + rows['nationCode'])
            //log.debug(rows['nationCode'].size())
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            value = newList[0].toString()
            log.debug("value는??" + value)
            //log.debug("새로운리스트 보여줘" + newList);
            
        }catch (Exception e){
            log.error( e );
            rt=[:]             
        }
        
        if (value != null && value != "null"){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            result.add(encodedResult)
            //log.debug(testItem)
            //log.debug(totalVal)
        }
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}


//mobile 발생단계
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newOccurStageEndpoint(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def projectKey=queryParams.getFirst("projectKey")as String
    def componentName=queryParams.getFirst("componentName")as String
    def rt=[:]
    def result=[]
    try{
        if (projectKey == null){
            return Response.ok(new JsonBuilder([projectKey: "", error: "Error in param projectKey"]).toString()).build()
        }
        if (componentName == null){
            return Response.ok(new JsonBuilder([componentName: "", error: "Error in param componentName"]).toString()).build()
        }
        
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisOccurPhase.do?projectKey=${projectKey}&modelCode="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisOccurPhase.do?projectKey=QI2410280087401001&modelCode=2019.07.09 IIS VPS"
        String params = URLEncoder.encode(componentName, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        try{
            rt = rows['OCCURPHASE'] 
            log.debug("새로운리스트 보여줘" + rt);
                    
        }catch (Exception e){    
            log.error( e );
            rt=[:]     
        }
        
        String value = rt[0]
        log.debug(value);
        if(value != null){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            log.debug(encodedResult);
            result.add(encodedResult);
        }
        //rt.items = totalVal
        //rt.total = totalVal.size()
        //rt.footer = "Choose 세부현상 (${totalVal.size()})... " 
        log.debug(result);
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}


//mobile 연계개발모델명
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLDecoder;
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newModelLinkEndPoint(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def projectKey=queryParams.getFirst("projectKey")as String
    def componentName=queryParams.getFirst("componentName")as String
    def rt=[:]
    def result = []
    def value = ""
    try{
        if (projectKey == null){
            return Response.ok(new JsonBuilder([projectKey: "", error: "Error in param projectKey"]).toString()).build()
        }
        if (componentName == null){
            return Response.ok(new JsonBuilder([componentName: "", error: "Error in param componentName"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisRefModelName.do?projectKey=${projectKey}&modelCode="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisRefModelName.do?projectKey=QI2411110091101001&modelCode=SHC-0627_EUR_BMY%20(FACTORY%20Bin)"
        String params = URLEncoder.encode(componentName, "UTF-8");
        //String params = URLDecoder.decode(componentName, "UTF-8");
        
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['MODELLINK']
            log.debug("MODELLINK?" + rows['MODELLINK'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            value = newList[0].toString()
            log.debug("value는??" + value)
            //log.debug("새로운리스트 보여줘" + newList);
            
        }catch (Exception e){
            log.error( e );
            rt=[:]          
        }
        
        if (value != null && value != "null"){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            result.add(encodedResult)
            //log.debug(testItem)
            //log.debug(totalVal)
            log.debug(encodedResult);
        }
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}


//컴포넌트 모델 타입
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLDecoder;
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newModelTypeName(httpMethod:"GET"){
    MultivaluedMap queryParams->
    String modelcode=queryParams.getFirst("modelcode")as String
    def rt=[:]
    def result = []
    def value = ""
    try{
        log.debug(modelcode);
        if (modelcode == null){
            return Response.ok(new JsonBuilder([modelcode: "", error: "Error in param modelcode"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisCompModelType.do?modelCode="
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisCompModelType.do?modelCode=NP061564A"
        String params = URLEncoder.encode(modelcode, "UTF-8");
        
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['modelTypeNameEng']
            log.debug("modelTypeNameEng?" + rows['modelTypeNameEng'])
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            value = newList[0].toString()
            log.debug("modelTypeNameEng??" + value)
            //log.debug("새로운리스트 보여줘" + newList);
            
        }catch (Exception e){
            log.error( e );
            rt=[:]          
        }
        
        if (value != null && value != "null"){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            result.add(encodedResult)
            //log.debug(testItem)
            //log.debug(totalVal)
            log.debug(result);
        }
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}


//closed option
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newClosedOption(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def language=queryParams.getFirst("language")as String
    def qdata=queryParams.getFirst("qdata")as String
    def rt=[:]
    try{
        log.debug(language);
        log.debug(qdata);
        if (qdata == null){
            return Response.ok(new JsonBuilder([qdata: "", error: "Error in param qdata"]).toString()).build()
        }
        if (language == null){
            return Response.ok(new JsonBuilder([language: "", error: "Error in param language"]).toString()).build()
        }
        
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisCloseOption.do?gbm=${qdata}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisCloseOption.do?gbm=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['closeOptionNameKor'] 
            }else{
                testUnitItem = rows['closeOptionNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("종료옵션에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Closed Option")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 종료옵션 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//plm개발모델검색
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newPlmModelSearch(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def projectNm   = queryParams.getFirst("projectNm") as String
    def projectCode = queryParams.getFirst("projectCode") as String
    def modelNm     = queryParams.getFirst("modelname") as String
    def pageNum     = queryParams.getFirst("pageNum") as String
    def pageSize    = queryParams.getFirst("pageSize") as String    
    def rt=[:]
    try{
        if ( !pageNum ) pageNum = "1"
        if ( !pageSize ) pageSize = "10"
        log.debug(projectNm);
        log.debug(projectCode);
        log.debug(modelNm);
        log.debug(pageNum);
        log.debug(pageSize);
        
        def paramArry = [];
        if ( pageNum == null || pageNum.trim() == "" ) {
            pageNum = "1";
        }
        if(pageNum != "1"){
            pageStart = ((pageNum.toInteger()-1)*pageSize.toInteger()) + 1
            pageEnd = (pageSize.toInteger() * pageNum.toInteger()).toString()
            paramArry.add(pageStart) 
            paramArry.add(pageEnd)
        }else{
            paramArry.add(pageNum) 
            paramArry.add(pageSize)            
        }
        log.debug("paramArry >> ${paramArry}");
        // if(issuetype == null){
        //     return Response.ok(new JsonBuilder([issuetype: "", error: "Error in param issuetype"]).toString()).build()
        // }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisProjectCode.do?pageNum=${pageNum}&pageSize=${pageSize}&projectNm=${projectNm}&projectCode=${projectCode}&modelNm=${modelNm}"
        
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisProjectCode.do?pageNum=1&pageSize=10&projectNm=CENO V6.X&projectCode=RDR0120ZZ-13CW&modelNm=01)CENO V6.0"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        //def testItem = [:]
        def totalVal = []
        //def testUninList
        //List<String> newList = new ArrayList<>()
        def totalHits = 0;
        try{
            rows.each { row ->
                def testUnitItem = [:]
                testUnitItem.total = row['TOTAL']
                testUnitItem.plmkey = row['PLMKEY']
                testUnitItem.projectid = row['PROJECTID']
                testUnitItem.projectcode = row['PROJECTCODE']
                testUnitItem.projectname = row['PROJECTNAME']
                testUnitItem.itemname = row['ITEMNAME']
                testUnitItem.itemstate = row['ITEMSTATE']
                testUnitItem.itemstateko = row['ITEMSTATEKO']
                testUnitItem.itemstateen = row['ITEMSTATEEN']
                testUnitItem.currentmilestone = row['CURRENTMILESTONE']
                totalVal.add (testUnitItem);
                //log.debug(totalVal);
                totalHits = row.TOTAL;
            }
        }catch (Exception e){    
            log.error( e );
            rt=[:] 
        }
        
        rt = [ totalHits : totalHits, items : totalVal ];
        log.debug("rt?" + rt);
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//생활가전 resolutiontype1
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisresolutionType1info(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    //def groupcode=queryParams.getFirst("groupcode")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        log.debug(language);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolTypeName1.do?language=KR"      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolTypeName1.do?language=EN"
        }
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisSolTypeName1.do?language=%27KR%27"
        
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['solTypeNameKor'] 
            }else{
                testUnitItem = rows['solTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("Resolution Type1에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Resolution Type1")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose ResolutionType1 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//생활가전 resolutiontype2
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisresolutionType2info(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def qfid=queryParams.getFirst("qfid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    def url = ""
    try{
        log.debug(language);
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolTypeName2.do?language=KR&solTypeName="      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolTypeName2.do?language=EN&solTypeName="
        }
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisSolTypeName2.do?language=KR&solTypeName=etc"
        
        String params = URLEncoder.encode(qfid, "UTF-8");
        log.debug(qfid);
        
        def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['solTypeNameKor'] 
            }else{
                testUnitItem = rows['solTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("Resolution Type2에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Resolution Type2")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose ResolutionType2 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//mobile subsysteminfo
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisSubSystemInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def rt=[:]
    try{
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSubSystemName.do"
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        
        try{
                testUnitItem = rows['subSystemNameKor'] 
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("System(해결)에 맞는 세부block이 없습니다.")           
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose System(해결) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}

//not defect name
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisNotDefectionInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def rt=[:]
    //def url = ""
    try{
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisNotDetectionName.do?language=KR"
        
        def apiurl = url
        //def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }

        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []

        try{
            if (fqid == "KR"){
                testUnitItem = rows['notDetectionNameKor'] 
            }else{
                testUnitItem = rows['notDetectionNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());

        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("미검출사유에 맞는 세부block이 없습니다.")                        
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 미검출사유 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//오류 형태
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisErrorTypeInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def type=queryParams.getFirst("type")as String 
    def rt=[:]
    //def url = ""
    try{
        if ( type == null ){
            return Response.ok(new JsonBuilder([type: "", error: "Error in param type"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisErrorTypeId.do?language=KR&errorTypeId=${type}"
        //def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisErrorTypeId.do?language=KR&errorTypeId=MW_ERROR_TYPE1"
        
        log.debug(type);
        def apiurl = url
        //def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (fqid == "KR"){
                testUnitItem = rows['errorTypeNameKor'] 
            }else{
                testUnitItem = rows['errorTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("오류형태에 맞는 세부block이 없습니다.")
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 오류형태 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//resolution step
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisResolutionStepInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def type=queryParams.getFirst("type")as String 
    def rt=[:]
    //def url = ""
    try{
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisResolutionStepName.do?language=KR"
        
        log.debug(fqid);
        log.debug(type);
        def apiurl = url
        //def apiurl = url + params
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (fqid == "KR"){
                testUnitItem = rows['resolutionStepNameKor'] 
            }else{
                testUnitItem = rows['resolutionStepNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("Resolution Step에 맞는 세부block이 없습니다.")
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Resolution Step (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//증상분류(대)
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisSymptomTypeHighInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String
    def language = queryParams.getFirst("language")as String
    def rt=[:]
    try{
        if(fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        log.debug(fqid);
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSymptomTypeHigh.do?language=KR"
        
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['symptomTypeNameKor'] 
            }else{
                testUnitItem = rows['symptomTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("증상분류(대)에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Symptom Category(High)")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 증상분류(대) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//증상분류(중)
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisSymptomTypeMidInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String 
    def rt=[:]
    def url = ""
    try{
        log.debug(fqid);
        if(fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSymptomTypeMid.do?language=KR&symptomTypeName="      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSymptomTypeMid.do?language=EN&symptomTypeName="
        }
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisSymptomTypeMid.do?language=KR&symptomTypeName=입력"
        String params = URLEncoder.encode(fqid, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['symptomTypeNameKor'] 
            }else{
                testUnitItem = rows['symptomTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("증상분류(중)에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Symptom Category(Mid)")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 증상분류(중) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//증상분류(소)
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisSymptomTypeLowInfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String 
    def rt=[:]
    def url = ""
    try{
        log.debug(fqid);
        if(fqid == null){
            return Response.ok(new JsonBuilder([fqid: "", error: "Error in param fqid"]).toString()).build()
        }
        if (language == "KR"){
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSymptomTypeLow.do?language=KR&symptomTypeName="      
        }else{
            url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSymptomTypeLow.do?language=EN&symptomTypeName="
        }
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisSymptomTypeLow.do?language=KR&symptomTypeName=와이파이"
        String params = URLEncoder.encode(fqid, "UTF-8");
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['symptomTypeNameKor'] 
            }else{
                testUnitItem = rows['symptomTypeNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("증상분류(소)에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Symptom Category(Low)")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 증상분류(소) (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//국가 정보
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventMWQisCountryinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String
    def issuetype=queryParams.getFirst("issuetype")as String
    def rt=[:]
    try{
        log.debug(fqid);
        log.debug(issuetype);
        if(issuetype == null){
            return Response.ok(new JsonBuilder([issuetype: "", error: "Error in param issuetype"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisCountryName.do?langugae=KR&groupCode=${issuetype}"
        
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisCountryName.do?langugae=KR&groupCode=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['countryNameKor'] 
            }else{
                testUnitItem = rows['countryNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("국가정보에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for nation")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose nation (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//발생권역
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventMWQisRegioninfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String
    def issuetype=queryParams.getFirst("issuetype")as String
    def rt=[:]
    try{
        log.debug(fqid);
        log.debug(issuetype);
        if(issuetype == null){
            return Response.ok(new JsonBuilder([issuetype: "", error: "Error in param issuetype"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisRegionName.do?language=KR&groupCode=${issuetype}"
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisRegionName.do?language=KR&groupCode=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['regionNameKor'] 
            }else{
                testUnitItem = rows['regionNameEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("발생권역에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Occurr Area")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose 발생권역 (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//발생법인
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventMWQisOccurCorpinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String
    def issuetype=queryParams.getFirst("issuetype")as String
    def rt=[:]
    try{
        log.debug(fqid);
        log.debug(issuetype);
        if(issuetype == null){
            return Response.ok(new JsonBuilder([issuetype: "", error: "Error in param issuetype"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisCorp.do?language=KR&groupCode=${issuetype}"
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisCorp.do?language=KR&groupCode=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['corpKor'] 
            }else{
                testUnitItem = rows['corpEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("발생법인에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Occurr Corp")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose nation (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//등록법인
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventMWQisResgisteCorpinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def language=queryParams.getFirst("language")as String
    def issuetype=queryParams.getFirst("issuetype")as String
    def rt=[:]
    try{
        log.debug(fqid);
        log.debug(issuetype);
        if(issuetype == null){
            return Response.ok(new JsonBuilder([issuetype: "", error: "Error in param issuetype"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisRegisteCorp.do?langugae=%27KR%27&groupCode=${issuetype}"
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisRegisteCorp.do?langugae=%27KR%27&groupCode=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            if (language == "KR"){
                testUnitItem = rows['registeCorpKor'] 
            }else{
                testUnitItem = rows['registeCorpEng']
                //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            }
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                if ( language == "KR"){
                    newList.add("등록법인에 맞는 세부block이 없습니다.")
                }else{
                    newList.add("There is no Block value for Register Corp")
                }            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose Register Corp (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//os버전
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newEventQisOsVerinfo(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def fqid=queryParams.getFirst("fqid")as String 
    def groupcode=queryParams.getFirst("groupcode")as String
    def rt=[:]
    try{
        log.debug(fqid);
        log.debug(groupcode);
        if(groupcode == null){
            return Response.ok(new JsonBuilder([groupcode: "", error: "Error in param groupcode"]).toString()).build()
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisOsverName.do?groupCode=${groupcode}"
        //def url ="http://10.40.86.225/Windchill/jira/cpcex/getQisOsverName.do?groupCode=25"
        //String params = URLEncoder.encode(fqid, "UTF-8");
        //def apiurl = url + params
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
                testUnitItem = rows['osverNameKor']
                newList = testUnitItem.stream().distinct().collect(Collectors.toList())
                log.debug("새로운리스트 보여줘" + newList);
                //log.debug(newList.size());
        }catch (Exception e){
                newList = new ArrayList<>()
                newList.add("OS버전에 맞는 세부block이 없습니다.")            
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        rt.total = totalVal.size()
        rt.footer = "Choose OS Ver. (${totalVal.size()})... " 
        //log.debug(rt)
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//QisOccurBlockingAndFeatureInfor_component api
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newComponent(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def projectKey = queryParams.getFirst("projectKey")as String
    def modelCode = queryParams.getFirst("modelCode")as String
    def rt=[:]
    def url = ""
    def result = []
    def value = ""
    log.debug(projectKey);
    log.debug(modelCode);
    try{
        url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisComponent.do?projectKey=${projectKey}&modelCode="
        //url = "http://10.40.86.225/Windchill/jira/cpcex/getQisComponent.do?projectKey=QI2410080080801001&modelCode=UN85AA9000FXZA"
        String param = URLEncoder.encode(modelCode, "UTF-8");
        
        def apiurl = url + param
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            testUnitItem = rows['prodCode'] 
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
            value = newList[0].toString()
        }catch (Exception e){
            log.error( e );
            //rt=[:]        
        }
        if (value != null && value != "null"){
            String encodedResult = URLEncoder.encode(value, "UTF-8")
            result.add(encodedResult)
            //log.debug(testItem)
            //log.debug(totalVal)
        }
        /*
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
        */
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}


//Resolution_Screen_upDefectTypeID api
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newUpDefectTypeID(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def rt=[:]
    def url = ""
    try{
        url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisUpDefectTypeID.do"
        
        def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            testUnitItem = rows['UPDEFECTTYPEID'] 
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
            log.error( e );
            rt=[:]          
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//Resolution_Screen_newUpDefectTypeName api
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newUpDefectTypeName(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def typeid = queryParams.getFirst("typeid")as String
    def rt=[:]
    def url = ""
    log.debug(typeid);
    try{
        url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisDefectTypeName.do?upDefectTypeID="
        String param = URLEncoder.encode(typeid, "UTF-8");
        
        def apiurl = url + param
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            testUnitItem = rows['DEFECTTYPENAMEKOR'] 
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
            log.error( e );
            rt=[:]        
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//Resolution_Screen_solcauseTypeName api
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newSolcauseTypeName(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def stypeid = queryParams.getFirst("stypeid")as String
    def rt=[:]
    def url = ""
    log.debug(stypeid);
    try{
        url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisSolcauseTypeName.do?upsolcauseTypeID="
        String param = URLEncoder.encode(stypeid, "UTF-8");
        
        def apiurl = url + param
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        def testItem = [:]
        def totalVal = []
        def testUninList
        List<String> newList = new ArrayList<>()
        def testUnitItem = []
        try{
            testUnitItem = rows['SOLCAUSETYPENAMEKOR'] 
            newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            log.debug("새로운리스트 보여줘" + newList);
        }catch (Exception e){
            log.error( e );
            rt=[:]        
        }
        
        for ( def list in newList ){
            log.debug(list)
            testItem = [:]
            testItem.put("value",list)
            testItem.put("label",list)
            //log.debug(testItem)
            totalVal.add(testItem)  
            //log.debug(totalVal)
        }
        
        rt.items = totalVal
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//로그인 user가 하도급법 대상인지 확인
import java.util.stream.Collectors
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import groovy.json.JsonBuilder
import static groovyx.net.http.Method.*
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import groovyx.net.http.HTTPBuilder
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.net.URLDecoder;
import java.net.URLEncoder
import java.sql.Driver
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript CustomEndpointDelegate delegate
newUserSubcontractCheck(httpMethod:"GET"){
    MultivaluedMap queryParams->
    def query=queryParams.getFirst("query")as String
    def username=queryParams.getFirst("username")as String
    def groupCode=queryParams.getFirst("groupCode")as String
    def result = []
    try{
        if (username == null){
            return Response.ok(new JsonBuilder([modelcode: "", error: "Error in param modelcode"]).toString()).build()
        }
        if (groupCode == null){
            groupCode = "11"
        }
        def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisExternalUid.do?groupCode=${groupCode}&externalUid="
        String params = URLEncoder.encode(username, "UTF-8");
        
        def apiurl = url + params
        //def apiurl = url
        log.debug(apiurl);
        def http = new HTTPBuilder(apiurl)
        def rows
        http.request(GET) {
            requestContentType = ContentType.JSON
            response.success = { resp, JSON ->
                rows = JSON
            }
            response.failure = { resp ->
                rows =  "Request failed with status ${resp.status}"
            }
        }
        List<String> newList = new ArrayList<>()
        
        try{
            def testUnitItem = rows['SUBCONTRACTACTYN']
            //newList = testUnitItem.stream().distinct().collect(Collectors.toList())
            newList = testUnitItem.stream().collect(Collectors.toList())
            log.debug(newList.size());
            log.debug("새로운리스트 보여줘" + newList[0]);
            result = newList[0].toString();
            
        }catch (Exception e){
            log.error( e );
            rt=[:]          
        }
                       
    }finally{
        log.debug("잘 됐습니다.")
    }
    return Response.ok(new JsonBuilder(result).toString()).build();
}

--Behaviours
//Occurr. Block
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level    

import groovy.transform.BaseScript

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)

@BaseScript FieldBehaviours fieldBehaviours
def occurBlock = getFieldById(getFieldChanged()) // Occur. Block
String occurBlockVal=occurBlock.rawValue

def feature = getFieldById("customfield_10418") // Feature
String featureVal = feature.getFormValue()

def problemType = getFieldById("customfield_10222") //Problem Type
String problemTypeVal = problemType.getValue()

def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")

// Occur. Block 의 값을 이용해서 Features 필드의 선택 가능 리스트를 query해서 list 에 설정
def issueTypeName =   getIssueContext().issueType.name

String gubun=""
String prodValue=""
String problemTypeValue=""

//사업부 분기
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
    //prodValue = prodCodeCf.getValue()
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}

if (problemTypeVal=="S/W"){
    problemTypeValue = "SW"
} else if(problemTypeVal=="Circuit") {
    problemTypeValue = "HW"
} else if(problemTypeVal=="Mech.") {
    problemTypeValue = "MW"
} else {
    problemTypeValue = "None"  
}

/****************************************
* Validation Check Start!
****************************************/
//def select = ""
log.debug(occurBlockVal + " / " + featureVal + " / " + problemTypeVal)

if(occurBlockVal && featureVal){
    def occurrBlockValItem = occurBlockVal.toString().bytes.encodeBase64Url()
    def featureItem = featureVal.toString().bytes.encodeBase64Url()
    
    //select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisOccurBlockinfo?gubun=" + gubun + "&fqid=" + problemTypeValue).getText()
    def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisOccurBlockinfo?gubun=" + gubun + "&fqid=" + problemTypeValue).openConnection()
    def response = connection.inputStream.getText('UTF-8')
    def jsonSlurper = new JsonSlurper()
    def select = jsonSlurper.parseText(response).toString();
    
    
    log.debug(select);
    log.debug(select?.getClass().getName());

    log.debug(occurBlockVal + " : occurBlock")
    log.debug(featureVal + " : Feature")

    if(!select.contains(occurBlockVal)) {
        feature.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!")
    } else {    
        feature.clearError()
    }
}else if (!occurBlockVal && !featureVal && problemTypeValue == "SW"){
   feature.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!") 
}
//---------------------------------------------------------------------------------------------------------------------------------------------
/*
def select = "select qfinfo.ida2a2, qfinfo.featurenameeng from QISFEATUREINFO qfinfo inner join QISOCCURBLOCKINFO qbinfo on qbinfo.blockid=qfinfo.blockid where qbinfo.blocknameeng  = '" + occurBlockVal + "' and qfinfo.featurenameeng = '" + featureVal + "'"
def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
    sql.rows(select)
}
if(rows) {
    feature.clearError()
} else {    
    feature.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!")
}*/
/****************************************
* Validation Check End!
****************************************/
if (occurBlockVal) {
    feature.convertToSingleSelect([    
        ajaxOptions: [
            url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisFeatureinfo?fqid=" + occurBlockVal + "&language=" + projectLanguage + "&gubun=" + gubun,
            //url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisFeatureinfo?fqid="+occurBlockVal+"&groupcode="+gubun,
            query         : true,
            formatResponse: "general"
        ]
    ])
    feature.setReadOnly(false)
}


//Feature
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level    
import groovy.transform.BaseScript
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def feature = getFieldById(getFieldChanged()) // Feature
String featureVal = feature.rawValue
def occurBlock = getFieldById("customfield_10604") // Occurr. Block
String occurBlockVal = occurBlock.getFormValue()
def problemType = getFieldById("customfield_10222") //Problem Type
String problemTypeVal = problemType.getValue()
def issueTypeName =   getIssueContext().issueType.name
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
String gubun=""
String prodValue=""
String problemTypeValue=""
//사업부 분기
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
    //prodValue = prodCodeCf.getValue()
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
if (problemTypeVal=="S/W"){
    problemTypeValue = "SW"
} else if(problemTypeVal=="Circuit") {
    problemTypeValue = "HW"
} else if(problemTypeVal=="Mech.") {
    problemTypeValue = "MW"
} else {
    problemTypeValue = "None"  
}
log.debug(occurBlockVal + " / " + featureVal + " / " + problemTypeVal)
/****************************************
* Validation Check Start!
****************************************/
//def select = ""
if(featureVal){
    String occurrBlockValItem = URLEncoder.encode(occurBlockVal, "UTF-8");
    def featureItem = featureVal.toString().bytes.encodeBase64Url()
    //select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisFeatureinfo?fqid=" + occurrBlockValItem + "&language=" + projectLanguage + "&gubun=" + gubun).getText()
    def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisFeatureinfo?fqid=" + occurrBlockValItem + "&language=" + projectLanguage + "&gubun=" + gubun).openConnection()
    def response = connection.inputStream.getText('UTF-8')
    def jsonSlurper = new JsonSlurper()
    def select = jsonSlurper.parseText(response).toString();
    log.debug(occurBlockVal + " : occurBlock")
    log.debug(featureVal + " : Feature")
    
    log.debug(select);
    log.debug(select?.getClass().getName());
    if(!select.contains(featureVal)) {
        feature.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!")
    } else {
        feature.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
/*
def select = "select qfinfo.ida2a2, qfinfo.featurenameeng from QISFEATUREINFO qfinfo inner join QISOCCURBLOCKINFO qbinfo on qbinfo.blockid=qfinfo.blockid where qbinfo.blocknameeng  = '" + occurBlockVal + "' and qfinfo.featurenameeng = '" + featureVal + "'"
def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
    sql.rows(select)
}
if(rows) {
    //comboCfc.clearError()
    feature.clearError()
} else {    
    //comboCfc.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!")
    feature.setError("First, select the \"Occurr. Block\", or choose the correct \"Feature\"!")
}*/
/****************************************
* Validation Check End!
****************************************/


//Component/s
/****************************************
* Components 에 선택되는 모델/과제 정보를 이용하여 Product Code 값과 Occurr. Stage 을 query하여 설정
* Update Date : 2021-05-30
****************************************
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.*
import com.onresolve.scriptrunner.canned.jira.fields.editable.database.SqlWithParameters
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.atlassian.jira.bc.project.component.ProjectComponent
import groovy.transform.BaseScript
import com.onresolve.scriptrunner.db.DatabaseUtil
import static com.atlassian.jira.issue.IssueFieldConstants.ISSUE_TYPE
import com.atlassian.jira.issue.CustomFieldManager
import groovy.sql.GroovyRowResult
import com.onresolve.jira.groovy.user.FormField
import org.apache.log4j.Logger
import org.apache.log4j.Level  
@BaseScript FieldBehaviours fieldBehaviours
String projectKey = null // Project의 key = 작업장번호 받아오기 위한 변수
def projectObj = underlyingIssue?.getProjectObject()
if (projectObj) {  
  projectKey = projectObj.key    
} else {  
  projectObj = getIssueContext().getProjectObject()  
  projectKey = projectObj?.getKey()  
}
def occurStage = getFieldById("customfield_10603") // Occur. Stage
def prodCodeCf = getFieldById("customfield_10800") // Product Code
def componentsCf = getFieldById(getFieldChanged()) // Components
def components = componentsCf.getValue() as List <ProjectComponent>
def problemType = getFieldById("customfield_10222") // Problem Type
    
if(components.size() > 1) { // component 필드에 복수개 값을 입력한 경우
  componentsCf.setError("Please select only one \"component/s\" related to this ISSUE.")
    prodCodeCf.setFormValue("")
    
    occurStage.setFormValue(-1)
    occurStage.setDescription("")
}
else if(components.size()==0) { // component 필드에 값이 없는 경우
    prodCodeCf.setFormValue("")
    occurStage.setError("First, select the \"Component/s\"!")
    occurStage.setFormValue(-1)
    occurStage.setDescription("")
    
    problemType.setError("First, select the \"Component/s\"!")
}
else { // component 필드가 1개의 값을 갖는 경우      
  // component값 결정에 따른 초기화 작업 수행
    componentsCf.clearError()
    occurStage.clearError()
    occurStage.clearHelpText()
    problemType.clearError()
    
    ProjectComponent component = components[0]
    String componentName = component.name
    
    if(componentName) {     // components 값과 위 사업부 구분 값으로 components에 해당되는 Product Code 값을 query해서 입력한다.
    def sel = "select qi.prodcode from qisexchange qe, qismodelinfo qm, qismodeldetailinfo qi where qe.ida2a2 = qm.ida3a4 and qm.lastmodelyn = 'Y' and qm.ida3c4 = qi.ida2a2 and replace(qe.workplacenumber,'-','') = '" + projectKey + "' and qi.modelcode = '" + componentName +"'"
        def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
                sql.rows(sel)
        }
        String t_str = rows.toString()
        String t_rows_class = rows.getClass()
      String prodCodeBr = rows.getAt('prodcode')
        String prodCode = prodCodeBr.substring(1,prodCodeBr.length()-1)
        
        if ( prodCode != null && prodCode != "null" ) {
          prodCodeCf.setFormValue(prodCode)
          prodCodeCf.setReadOnly(true)
        } else {
            prodCodeCf.setFormValue("")
        }
        
        // (시작) Components 값으로 발생단계(Occurr Stage) 값을 query하여 자동 입력
        def sel2 = "select max(pp.occurphase) as occurphase from qisexchange qe, qismodelinfo qm, qismodeldetailinfo qi, plmoccurPhasemap pp where qe.ida2a2 = qm.ida3a4 and qm.lastmodelyn = 'Y' and qm.ida3c4 = qi.ida2a2 and qi.currentmilestone = pp.currentmilestone and replace(qe.workplacenumber, '-', '') = '" + projectKey + "' and qi.modelcode = '" + componentName +"'"
        def row2 = DatabaseUtil.withSql('RESEARCH') { sql ->
              sql.rows(sel2)
        }
        //String occurPhase = row2.getAt('occurphase')
        
      String occurPhaseBr = row2.getAt('occurphase')
        String occurPhase = occurPhaseBr.substring(1,occurPhaseBr.length()-1)
                
        if(occurPhase != null && occurPhase != "null") { // occurrPhase 값이 존재하는 경우
          def optionsManager = ComponentAccessor.getOptionsManager ()
      def cfField = customFieldManager.getCustomFieldObject(occurStage.getFieldId ())
      def cfConfig = cfField.getRelevantConfig (getIssueContext())
      def cfOptions = optionsManager.getOptions (cfConfig)
          def option = cfOptions.find {it.value == occurPhase}    
            
          occurStage.setFormValue(option.optionId)
          //occurStage.setHelpText("Occurr. Stage was selected from Component's stage!")
            occurStage.setDescription("Occurr. Stage was selected from Component/s!")
        } else {    // occurPhae 값이 null이거나 없는 경우
          occurStage.setFormValue(-1)
          occurStage.setDescription("")
          occurStage.setHelpText("Plz, Select Occur. Stage yourself!")
        }            
        //occurStage.setFormValue(occurPhase)
        //occurStage.setFieldOptions(cfOptions.findAll {occurPhase.value})
        // (끝) Components 값으로 발생단계(Occurr Stage) 값을 query하여 자동 입력         //
  } 
    else {
        prodCodeCf.setFormValue("")
    }
    
    //components 변경에 따라 Problem Type 값을 None 으로 초기화
    problemType.setFormValue(-1)
}*/
/****************************************
* Components 에 선택되는 모델/과제 정보를 이용하여 Product Code 값과 Occurr. Stage 을 query하여 설정
* Update Date : 2021-05-30
****************************************/
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.*
import com.onresolve.scriptrunner.canned.jira.fields.editable.database.SqlWithParameters
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.atlassian.jira.bc.project.component.ProjectComponent
import groovy.transform.BaseScript
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovyx.net.http.HTTPBuilder
import static com.atlassian.jira.issue.IssueFieldConstants.ISSUE_TYPE
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import static groovyx.net.http.Method.*
import groovy.json.JsonSlurper
import net.sf.json.groovy.JsonSlurper
import java.util.stream.Collectors
import java.net.URLEncoder
import com.atlassian.jira.issue.CustomFieldManager
import groovy.sql.GroovyRowResult
import com.onresolve.jira.groovy.user.FormField
import com.onresolve.scriptrunner.runner.util.UserMessageUtil
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
String projectKey = null // Project의 key = 작업장번호 받아오기 위한 변수
def projectObj = underlyingIssue?.getProjectObject()
if (projectObj) {  
  projectKey = projectObj.key    
} else {  
  projectObj = getIssueContext().getProjectObject()  
  projectKey = projectObj?.getKey()  
}
def occurStage = getFieldById("customfield_10603") // Occur. Stage
def prodCodeCf = getFieldById("customfield_10800") // Product Code
def componentsCf = getFieldById(getFieldChanged()) // Components
def components = componentsCf.getValue() as List <ProjectComponent>
def problemType = getFieldById("customfield_10222") // Problem Type
def issueTypeName = getIssueContext().issueType.name
def customFieldManager = ComponentAccessor.getCustomFieldManager()
def occurPhaseField = customFieldManager.getCustomFieldObject("customfield_10603")
def occurPhaseValue = underlyingIssue?.getCustomFieldValue(occurPhaseField)
def optionsManager = ComponentAccessor.getOptionsManager()
def occurStageFieldId = customFieldManager.getCustomFieldObject(occurStage.getFieldId())
def occurStageconfig = occurStageFieldId.getRelevantConfig(getIssueContext())
def occurStageOptionsOriginal = optionsManager.getOptions(occurStageconfig)
def rt = [:]
String gubun="25"
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
    //prodValue = prodCodeCf.getValue()
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
    
if(components.size() > 1) { // component 필드에 복수개 값을 입력한 경우
  componentsCf.setError("Please select only one \"component/s\" related to this ISSUE.")
  prodCodeCf.setFormValue("")
  occurStage.setFormValue(-1)
  occurStage.setDescription("")
  problemType.setFormValue(-1)
  occurStage.clearError()
  problemType.clearError()
} else if(components.size()==0) { // component 필드에 값이 없는 경우
  componentsCf.clearError()
  prodCodeCf.setFormValue("")
  occurStage.setFormValue(-1)
  occurStage.setDescription("")
  problemType.setFormValue(-1)
  occurStage.setError("First, select the \"Component/s\"!")
  problemType.setError("First, select the \"Component/s\"!")
} else { // component 필드가 1개의 값을 갖는 경우      
  ProjectComponent component = components[0]
  String componentName = component.name
  // component값 결정에 따른 초기화 작업 수행
  if(componentName) {     // components 값과 위 사업부 구분 값으로 components에 해당되는 Product Code 값을 query해서 입력한다.
    //components 변경에 따라 Problem Type 값을 None 으로 초기화
    problemType.setFormValue(-1)
    
    componentsCf.clearError()
    problemType.clearError()
    occurStage.clearError()
    log.debug("Inside componentName $componentName")
//------------------------------------------------------------------
    String params = URLEncoder.encode(componentName, "UTF-8");
    def url = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newComponent?projectKey=" + projectKey + "&modelCode=" + params)
    
    def apiurl = url
    def http = new HTTPBuilder(apiurl)
    http.request(GET) {
       requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            rt = JSON
        }
        response.failure = { resp ->
            rt =  "Request failed with status ${resp.status}"
        }
    }
    
    String prod = rt.toString()
    String prodCode = prod.substring(1,prod.length()-1)
    log.debug(prodCode);
//------------------------------------------------------------------    
    // def sel = "select qi.prodcode from qisexchange qe, qismodelinfo qm, qismodeldetailinfo qi where qe.ida2a2 = qm.ida3a4 and qm.lastmodelyn = 'Y' and qm.ida3c4 = qi.ida2a2 and replace(qe.workplacenumber,'-','') = '" + projectKey + "' and qi.modelcode = '" + componentName +"'"
    // def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
    //         sql.rows(sel)
    // }
    // String t_str = rows.toString()
    // String t_rows_class = rows.getClass()
    // String prodCodeBr = rows.getAt('prodcode')
    // String prodCode = prodCodeBr.substring(1,prodCodeBr.length()-1)
//------------------------------------------------------------------        
      
    if ( prodCode != null && prodCode != "null" ) {
      prodCodeCf.setFormValue(prodCode)
      prodCodeCf.setReadOnly(true)
    } else {
      prodCodeCf.setFormValue("")
    }
    String componentNameRestValue = componentName
    String componentNameRest = URLEncoder.encode(componentNameRestValue, "UTF-8")
    log.debug("componentNameRest: $componentNameRest")
    /* old query 에서 신규 쿼리로 변경함.
    def sel2 = "select max(pp.occurphase) as occurphase from qisexchange qe, qismodelinfo qm, qismodeldetailinfo qi, plmoccurPhasemap pp where qe.ida2a2 = qm.ida3a4 and qm.lastmodelyn = 'Y' and qm.ida3c4 = qi.ida2a2 and qi.currentmilestone = pp.currentmilestone and replace(qe.workplacenumber, '-', '') = '" + projectKey + "' and qi.modelcode = '" + componentName +"'"
    def row2 = DatabaseUtil.withSql('RESEARCH') { sql ->
          sql.rows(sel2)
    }
    */
    if ( !occurPhaseValue ){
      def occurStageValue = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newOccurStageEndpoint?projectKey=" + projectKey + "&componentName=" + componentNameRest + "&groupCode=" + gubun).getText()
      //def occurStageValue = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/occurStageEndpoint?projectKey=" + projectKey + "&componentName=" + componentNameRest + "&groupCode=" + gubun).getText()
      if(occurStageValue!="[]"){
        def occurPhase = occurStageValue.substring(2, occurStageValue.size()-2)
        log.debug("occurPhase: $occurPhase")
        
        if(occurPhase != null && occurPhase != "null" ) { // occurrPhase 값이 존재하는 경우
        String occurStageData = occurStageValue.substring(2,occurStageValue.length()-2)
          String occurStageRestValue = URLDecoder.decode(occurStageData, "UTF-8")
            log.debug("2.발생단계 리스트가 나온이후 로그 " + occurStageRestValue)
          def occurStageValueOption = occurStageOptionsOriginal.findAll { it.value in [occurStageRestValue] } 
            if (occurStageValueOption.size() == 1){
                log.debug("여기 들어와야 합니다.")
                occurStage.setFormValue(occurStageValueOption.optionId)
            }else if ( occurStageValueOption.size() > 1 ){
                occurStage.setFieldOptions(occurStageValueOption)
                occurStage.setDescription("데이터베이스에 occurStage 데이터가 없습니다. 직접 선택해주세요. / The database does not have an occurr stage value. Please choose for yourself.")
            }else{
                occurStage.setFormValue(-1)
                occurStage.setDescription("데이터베이스에 occurStage 데이터가 없습니다. 직접 선택해주세요. / The database does not have an occurr stage value. Please choose for yourself.")
            }
  /*
          def cfField = customFieldManager.getCustomFieldObject(occurStage.getFieldId ())
          def cfConfig = cfField.getRelevantConfig (getIssueContext())
          def cfOptions = optionsManager.getOptions (cfConfig)
          log.debug("cfOptions: $cfOptions")
          def option = cfOptions.find {it.value == occurPhase}     
          log.debug("option: $option")
          if(option){
            occurStage.setFormValue(option.getOptionId())
            occurStage.setDescription("Occurr. Stage was selected from Component/s!")
          } else{
            occurStage.setFormValue(-1)
            occurStage.setDescription("")
            occurStage.setHelpText("Plz, Select Occur. Stage yourself!")
          }*/
        } 
      } else {    // occurPhase 값이 null이거나 없는 경우
          log.debug("if null or nothing")
          occurStage.setFormValue(-1)
          occurStage.setDescription("")
          occurStage.setHelpText("Plz, Select Occur. Stage yourself!")
      }
    }
  } 
}


//Test Place
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def testPlace = getFieldById(getFieldChanged()) // 시험처
def testPlacefield = getFieldById("customfield_10401")
def testType = getFieldById("customfield_10825") // 시험분류
def testName = getFieldById("customfield_10411") // 시험항목
String testPlaceValue = testPlace.value // 시험처 Value
def devVerf = getFieldById("customfield_10822").value // 개발 검증 데이터
def devVerfValue = ""
def testPlaceStatus = getActionName().toLowerCase()
def newTestPlaceValue
def customFieldManager = ComponentAccessor.getCustomFieldManager()
def optionsManager = ComponentAccessor.getOptionsManager()
def customField = customFieldManager.getCustomFieldObject(testPlacefield.getFieldId())
def config = customField.getRelevantConfig(getIssueContext())
def options = optionsManager.getOptions(config)
log.debug(testPlaceValue)
if(devVerf == "Dev."){
    devVerfValue = "DEV"
}else{
    devVerfValue = "VERIFY"
}
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
def testPlaceAction = getActionName()
def value
/****************************************
* Validation Check Start!
****************************************/
//def select = "" 
def rows = ""
String params = URLEncoder.encode(testPlaceValue, "UTF-8");
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestPlaceinfo?language=" + projectLanguage + "&testType=" + devVerfValue + "&testPlaceVal=$params").getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestPlaceinfo?language=" + projectLanguage + "&testType=" + devVerfValue + "&testPlaceVal=$params").openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!testPlaceValue.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( select == "[]" && projectLanguage != "KR" ) {
        testPlace.setError("First, select the \"Test Place\", or choose the correct \"Dev. Verf.\"!")
    }else if ( select == "[]" && projectLanguage == "KR"){
        testPlace.setError("개발/검증 항목이 변경되었다면 시험처도 변경되어야 합니다.")
    }else {    
       testPlace.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if (projectLanguage == "KR"){
//      select = "select namekor from qisTESTUNITINFO where groupcode='25' and useyn='Y' and testtype = ?.Q and namekor = ?.W"
//   }else{
//     select = "select nameeng from qisTESTUNITINFO where groupcode='25' and useyn='Y' and testtype = ?.Q and nameeng = ?.W"
// }
// if(!testPlaceValue.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${devVerfValue}".toString(), W:"${testPlaceValue}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         testPlace.setError("First, select the \"Test Place\", or choose the correct \"Dev. Verf.\"!")
//     }else if (!rows && projectLanguage == "KR"){
//         testPlace.setError("개발/검증 항목이 변경되었다면 시험처도 변경되어야 합니다.")
//     }else {    
//        testPlace.clearError()
//     }
// }
/****************************************
* Validation Check End!
****************************************/
if(!testPlaceValue.empty){
    
    testType.setReadOnly(false)
    testName.setReadOnly(false)
    
    def tt = getFieldById("customfield_10825").convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestCategoryinfo?fqid=" + testPlaceValue + "&language=" + projectLanguage,
            //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisTestCategoryinfo?fqid=" + testPlaceValue + "&language=" + projectLanguage,
            query: true,
            formatResponse: "general"
        ]
    ])
    
    // getFieldById("customfield_10411").convertToSingleSelect([
    //     ajaxOptions: [
    //         url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisTestNameInfo?fqid=" + testPlaceValue + "&language=" + projectLanguage,
    //         query: true,
    //         formatResponse: "general"
    //     ]
    // ])
    
    
    if(testType.getConvertTo() == null){
        testType.setReadOnly(true)
        testType.setFormValue("W/W")
    }else{
        testType.setReadOnly(false)
        testType.setFormValue("")
    }
    
}else{
    testType.setReadOnly(true)
    testName.setReadOnly(true)
    testType.setFormValue("")
    testName.setFormValue("")
}


//Test Type
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import java.net.URLEncoder
import java.net.URLDecoder
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
String testPlace = getFieldById("customfield_10401").value // 시험처 Value
def testName = getFieldById("customfield_10411") // 시험항목
def testTypeField = getFieldById("customfield_10825") // 시험분류 Field
String testType = testTypeField.value // 시험분류 Value
// Project 언어 가져오기
def projectLanguage = getFieldById("customfield_10847").value // 프로젝트 언어 Value
//데이터 Encoding
String testPlaceEncodeValue = URLEncoder.encode(testPlace, "UTF-8")
String testTypeEncodeValue = URLEncoder.encode(testType, "UTF-8")
/****************************************
* Validation Check Start!
****************************************/
//def select = "" 
def rows = ""
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestCategoryinfo?fqid=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testTypeEncodeValue).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestCategoryinfo?fqid=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testTypeEncodeValue).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!testType.empty && !testType.contains("W/W") ){
    log.debug("not empty + not W/W");
    log.debug(select);
    log.debug(select?.getClass().getName());
    
    if(select.contains("W/W") && projectLanguage != "KR") {
        testTypeField.setError("First, select the \"Test Place\", or choose the correct \"Test Type\"!")
    }else if (select.contains("W/W") && projectLanguage == "KR"){
        testTypeField.setError("시험처가 변경되었다면 시험항목도 변경되어야 합니다.")
    }else {    
       testTypeField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// if (projectLanguage == "KR"){
//      select = "select categorynamekor from QISTESTCATEGORYINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and namekor = ?.Q) and categorynamekor = ?.W"
//   }else{
//     select = "select categorynameeng from QISTESTCATEGORYINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and nameeng = ?.Q) and categorynameeng = ?.W"
// }
// if(!testType.empty && testType != "W/W"){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${testPlace}".toString(), W:"${testType}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         testTypeField.setError("First, select the \"Test Place\", or choose the correct \"Test Type\"!")
//     }else if (!rows && projectLanguage == "KR"){
//         testTypeField.setError("시험처가 변경되었다면 시험항목도 변경되어야 합니다.")
//     }else {    
//        testTypeField.clearError()
//     }
// }else{
//     testTypeField.clearError()
// }
//---------------------------------------------------------------------------------------------------------------------------------------------
if (testType.empty){
    testType = 'W/W'
    testTypeEncodeValue = URLEncoder.encode(testType, "UTF-8")
}
if(!testType.empty){
    testName.setReadOnly(false)
    
    getFieldById("customfield_10411").convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestNameInfo?testPlace=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testTypeEncodeValue,
            //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisTestNameInfo?testPlace=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testTypeEncodeValue,
            query: true,
            formatResponse: "general"
        ]
    ])
}else{
    testName.setReadOnly(true)
    testName.setFormValue("")
}


//Test Name
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import java.net.URLEncoder
import java.net.URLDecoder
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def testPlace = getFieldById("customfield_10401").value // 시험처 Value
def testNameField = getFieldById("customfield_10411") // 시험항목 Field
String testName = testNameField.value // 시험항목 Value
def testTypeField = getFieldById("customfield_10825") // 시험분류 Field
String testType = testTypeField.value // 시험분류 Value
// Project 언어 가져오기
def projectLanguage = getFieldById("customfield_10847").value // 프로젝트 언어 Value
/****************************************
* Validation Check Start!
****************************************/
//def select = "" 
def rows = ""
testName = URLEncoder.encode(testName, "UTF-8");
//testPlace = testPlace.toString();
String testPlaceEncodeValue = URLEncoder.encode(testPlace, "UTF-8")
log.debug(testName);
log.debug(testPlaceEncodeValue);
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestNameInfo?testPlace=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testPlaceEncodeValue + "&testName=" + testName).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestNameInfo?testPlace=" + testPlaceEncodeValue + "&language=" + projectLanguage + "&testType=" + testPlaceEncodeValue + "&testName=" + testName).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!testName.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    
    if(select == "[]" && projectLanguage != "KR") {
        testNameField.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
    } else if (select == "[]" && projectLanguage == "KR"){
        testNameField.setError("시험처가 변경되었다면 시험항목도 변경되어야 합니다.")
    }else {    
       testNameField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// if (testType.empty){
//     testType = 'W/W'
// }
// if(testType == "W/W"){
//     if (projectLanguage == "KR"){
//         select = "select itemnamekor from QISTESTITEMINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and namekor = ?.Q) and itemnamekor = ?.W"
//       }else{
//         select = "select itemnameeng from QISTESTITEMINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and nameeng = ?.Q) and itemnameeng = ?.W"
//     }
// }else{
//     if(projectLanguage == "KR"){
//         select = "select itemnamekor as itemname from QISTESTITEMINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and namekor = ?.Q and categoryid = (select categoryid from QISTESTCATEGORYINFO where categorynamekor = ?.P and unitid = (select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and namekor = ?.Q))) and itemnamekor = ?.W"
//     }else{
//         select = "select itemnameeng as itemname from QISTESTITEMINFO where useyn='Y' and unitid=(select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and nameeng = ?.Q and categoryid = (select categoryid from QISTESTCATEGORYINFO where categorynameeng = ?.P and unitid = (select unitid from QISTESTUNITINFO where rownum = 1 and groupcode='25' and useyn='Y' and nameeng = ?.Q))) and itemnameeng = ?.W"
//     }
// }
// if(!testName.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${testPlace}".toString(), W:"${testName}".toString(), P:"${testType}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         testNameField.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         testNameField.setError("시험처가 변경되었다면 시험항목도 변경되어야 합니다.")
//     }else {    
//        testNameField.clearError()
//     }
// }


//Appearance Classification
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import java.net.URLEncoder
import java.net.URLDecoder
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def appearanceClassificationField = getFieldById("customfield_10828") // 현상분류
String appearanceClassification = appearanceClassificationField.value // 현상분류 Value
def testPlace = getFieldById("customfield_10401").value // 시험처
def detailedFailureSituation = getFieldById("customfield_10829") // 세부현상
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
String testPlaceValue = URLEncoder.encode(testPlace, "UTF-8");
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisFailureTypeinfo?fqid=" + testPlaceValue + "&language=" + projectLanguage).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!appearanceClassification.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !select.contains(appearanceClassification) && projectLanguage != "KR" ) {
       appearanceClassificationField.setError("First, select the \"Test Place\", or choose the correct \"Appearance Classification\"!")
    }else if ( !select.contains(appearanceClassification) && projectLanguage == "KR"){
       appearanceClassificationField.setError("시험처가 변경되었다면 현상분류도 변경되어야 합니다.")
    }else {    
       appearanceClassificationField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if (projectLanguage == "KR"){
//      select = "select failurenamekor from qisfailuretypeinfo where useyn = 'Y' and groupcode = '25' and unitnamekor like ?.Q and failurenamekor = ?.W"
//   }else{
//     select = "select failurenameeng from qisfailuretypeinfo where useyn = 'Y' and groupcode = '25' and unitnameeng like ?.Q and failurenameeng = ?.W"
// }
// if(!appearanceClassification.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"%${testPlace}%".toString(), W:"${appearanceClassification}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         appearanceClassificationField.setError("First, select the \"Test Place\", or choose the correct \"Appearance Classification\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         appearanceClassificationField.setError("시험처가 변경되었다면 현상분류도 변경되어야 합니다.")
//     }else {    
//        appearanceClassificationField.clearError()
//     }
// }
/****************************************
* Validation Check End!
****************************************/
if(!appearanceClassification.empty){
    
    detailedFailureSituation.setReadOnly(false)
    
    // 세부현상 필드
    detailedFailureSituation.convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisDetailedFailureinfo?fqid=" + appearanceClassification + "&language=" + projectLanguage,
            //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisDetailedFailureinfo?fqid=" + appearanceClassification + "&language=" + projectLanguage,
            query: true,
            formatResponse: "general"
        ]
    ])
}else{
    detailedFailureSituation.setReadOnly(true)
}


//Detailed Failure Situation
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import java.net.URLEncoder
import java.net.URLDecoder
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def appearanceClassification = getFieldById("customfield_10828").value // 현상분류 Value
def detailedFailureSituationField = getFieldById("customfield_10829") // 세부현상 Field
String detailedFailureSituation = detailedFailureSituationField.value // 세부현상 Value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
String appearanceClassificationVal = URLEncoder.encode(appearanceClassification, "UTF-8");
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisDetailedFailureinfo?fqid=" + appearanceClassificationVal + "&language=" + projectLanguage).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!detailedFailureSituation.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !select.contains(detailedFailureSituation) && projectLanguage != "KR" ) {
       detailedFailureSituationField.setError("First, select the \"Test Place\", or choose the correct \"Detailed Failure Situation\"!")
    }else if ( !select.contains(detailedFailureSituation) && projectLanguage == "KR"){
       detailedFailureSituationField.setError("시험처가 변경되었다면 세부현상도 변경되어야 합니다.")
    }else {    
       detailedFailureSituationField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if (projectLanguage == "KR"){
//    select = "select detailproblemnamekor from qisdetailproblemtypeinfo where useyn = 'Y' and failurenamekor = (select failureid from qisfailuretypeinfo where rownum =1 and groupcode = '25'and useyn = 'Y' and failurenamekor = ?.Q) and detailproblemnamekor = ?.W"
//   }else{
//     select = "select detailproblemnameeng from qisdetailproblemtypeinfo where useyn = 'Y' and failurenamekor = (select failureid from qisfailuretypeinfo where rownum =1 and groupcode = '25'and useyn = 'Y' and failurenameeng = ?.Q) and detailproblemnameeng = ?.W"
// }
// if(!detailedFailureSituation.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${appearanceClassification}".toString(), W:"${detailedFailureSituation}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         detailedFailureSituationField.setError("First, select the \"Test Place\", or choose the correct \"Detailed Failure Situation\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         detailedFailureSituationField.setError("시험처가 변경되었다면 세부현상도 변경되어야 합니다.")
//     }else {    
//        detailedFailureSituationField.clearError()
//     }
// }

//Occurr. Type
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import java.net.URLEncoder
import java.net.URLDecoder
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours

def testPlace = getFieldById("customfield_10401").value // 시험처 Value
def occurrTypeField = getFieldById("customfield_10826")  // occurrType Field
String occurrType = occurrTypeField.value // occurrType Value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")


/****************************************
* Validation Check Start!
****************************************/
String testPlaceValue = URLEncoder.encode(testPlace, "UTF-8");

log.debug(occurrType);
log.debug(testPlaceValue);
if (testPlace==""){occurrTypeField.setReadOnly(true)} // 시험처 값이 비어있을때 종속된 필드 ReadOnly

def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisOccurTypeinfo?fqid=" + testPlaceValue + "&language=" + projectLanguage).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();

if(!occurrType.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());

    if( !select.contains(occurrType) && projectLanguage != "KR" ) {
       occurrTypeField.setError("First, select the \"Test Place\", or choose the correct \"Occurr Type\"!")
    }else if ( !select.contains(occurrType) && projectLanguage == "KR"){
       occurrTypeField.setError("시험처가 변경되었다면 발생유형도 변경되어야 합니다.")
    }else {    
       occurrTypeField.clearError()
    }
}

//DB 조회에서 Rest 호출로 구조 변경.
// //---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""

// if (testPlace==""){occurrTypeField.setReadOnly(true)} // 시험처 값이 비어있을때 종속된 필드 ReadOnly
// if (projectLanguage == "KR"){
//    select = "select * from qisoccurtypeinfo where useyn='Y' and groupcode = '25' and unitnamekor = ?.Q and OCCURTYPENAMEKOR = ?.W"
//   }else{
//     select = "select * from qisoccurtypeinfo where useyn='Y' and groupcode = '25' and unitnameeng = ?.Q and OCCURTYPENAMEENG = ?.W"
// }

// if(!occurrType.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${testPlace}".toString(), W:"${occurrType}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         occurrTypeField.setError("First, select the \"Test Place\", or choose the correct \"Occurr Type\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         occurrTypeField.setError("시험처가 변경되었다면 발생유형도 변경되어야 합니다.")
//     }else {    
//        occurrTypeField.clearError()
//     }
// }


//Symptom Category(Mid)
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import java.net.URLEncoder
import java.net.URLDecoder
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
def symptonMidField = getFieldById(getFieldChanged())
String symptonMidFieldValue = symptonMidField.value
def testPlace = getFieldById("customfield_10401").value // 시험처 Value
def customFieldManager =  ComponentAccessor.getCustomFieldManager()
def symptonHighField = getFieldById("customfield_12107")
def symptonLowField = getFieldById("customfield_12109")
String symptonHighFieldValue = symptonHighField.getValue()
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
String symptonHighFieldfqid = URLEncoder.encode(symptonHighFieldValue, "UTF-8");
if ( symptonMidFieldValue.empty ){
    symptonLowField.setReadOnly(true)
}
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSymptomTypeMidInfo?fqid=" + symptonHighFieldfqid + "&language=" + projectLanguage).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!symptonMidFieldValue.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !select.contains(symptonMidFieldValue) && projectLanguage != "KR" ) {
       symptonMidField.setError("First, select the \"Symptom Category(High)\", or choose the correct \"Symptom Category(Mid)\"!")
    }else if ( !select.contains(symptonMidFieldValue) && projectLanguage == "KR"){
       symptonMidField.setError("성격분류(대) 항목이 변경되었으면 성격분류(중) 항목도 변경되어야 합니다.")
    }else {    
       symptonMidField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if ( symptonMidFieldValue.empty ){
//     symptonLowField.setReadOnly(true)
// }
// if (projectLanguage == "KR"){
//      select = "select SYMPTOMTYPENAMEKOR from QISSYMPTOMTYPEINFO where useyn='Y' and groupcode = '25' AND OPTIONLEVEL = 'MID' AND UPSYMPTOMTYPENAMEKOR = ?.Q AND SYMPTOMTYPENAMEKOR = ?.W"
//   }else{
//     select = "select SYMPTOMTYPENAMEENG from QISSYMPTOMTYPEINFO where useyn='Y' and groupcode = '25' AND OPTIONLEVEL = 'MID' AND UPSYMPTOMTYPENAMEENG = ?.Q AND SYMPTOMTYPENAMEENG = ?.W"
// }
// if(!symptonMidFieldValue.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${symptonHighFieldValue}".toString(), W:"${symptonMidFieldValue}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         symptonMidField.setError("First, select the \"Symptom Category(High)\", or choose the correct \"Symptom Category(Mid)\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         symptonMidField.setError("성격분류(대) 항목이 변경되었으면 성격분류(중) 항목도 변경되어야 합니다.")
//     }else {    
//        symptonMidField.clearError()
//     }
// }
/****************************************
* Validation Check End!
****************************************/
if ( !symptonMidFieldValue.empty) {
    symptonLowField.convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSymptomTypeLowInfo?fqid=" + symptonMidFieldValue + "&language=" + projectLanguage,
            //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisSymptomTypeLowInfo?fqid=" + symptonMidFieldValue + "&language=" + projectLanguage,
            query: true,
            formatResponse: "general"
        ]
    ])
}


//Symptom Category(Low)
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import java.net.URLEncoder
import java.net.URLDecoder
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
def symptonLowField = getFieldById(getFieldChanged())
def symptonHighField = getFieldById("customfield_12107")
def symptonMidField = getFieldById("customfield_12108")
String symptonHighFieldValue = symptonHighField.getValue()
String symptonMidFieldValue = symptonMidField.getValue()
String symptonLowFieldValue = symptonLowField.getValue()
def testPlace = getFieldById("customfield_10401").value // 시험처 Value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
String symptonMidFieldfqid = URLEncoder.encode(symptonMidFieldValue, "UTF-8");
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSymptomTypeLowInfo?fqid=" + symptonMidFieldfqid + "&language=" + projectLanguage).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!symptonLowFieldValue.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !select.contains(symptonLowFieldValue) && projectLanguage != "KR" ) {
       symptonLowField.setError("First, select the \"Symptom Category(Mid)\", or choose the correct \"Symptom Category(Low)\"!")
    }else if ( !select.contains(symptonLowFieldValue) && projectLanguage == "KR"){
       symptonLowField.setError("성격분류(중) 항목이 변경되었으면 성격분류(소) 항목도 변경되어야 합니다.")
    }else {    
       symptonLowField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if (projectLanguage == "KR"){
//    select = "select SYMPTOMTYPENAMEKOR from QISSYMPTOMTYPEINFO where useyn='Y' and groupcode = '25' AND OPTIONLEVEL = 'LOW' AND UPSYMPTOMTYPENAMEKOR = ?.Q AND SYMPTOMTYPENAMEKOR = ?.W"
//   }else{
//     select = "select SYMPTOMTYPENAMEENG from QISSYMPTOMTYPEINFO where useyn='Y' and groupcode = '25' AND OPTIONLEVEL = 'LOW' AND UPSYMPTOMTYPENAMEENG = ?.Q AND SYMPTOMTYPENAMEENG = ?.W"
// }
// if(!symptonLowFieldValue.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${symptonMidFieldValue}".toString(), W:"${symptonLowFieldValue}".toString()])
//     }
    
//     if(!rows && projectLanguage != "KR") {
//         symptonLowField.setError("First, select the \"Symptom Category(Mid)\", or choose the correct \"Symptom Category(Low)\"!")
//     }else if (!rows && projectLanguage == "KR"){
//         symptonLowField.setError("성격분류(중) 항목이 변경되었으면 성격분류(소) 항목도 변경되어야 합니다.")
//     }else {    
//        symptonLowField.clearError()
//     }
// }
/****************************************
* Validation Check End!
****************************************/


//Occurr. Block
/*
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
@BaseScript FieldBehaviours fieldBehaviours
def occurrBlockField = getFieldById("customfield_10604") // 발생 Block Field
def testPlace = getFieldById("customfield_10401").value // 시험처(Test Place) Value
String occurrBlock = occurrBlockField.value  // 발생 Block Value
def feature = getFieldById("customfield_10418")     // Feature
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************
def select = ""
def rows= ""
if (projectLanguage == "KR"){
    select = "select * from QISOCCURBLOCKINFO where useyn = 'Y' and groupcode = '25' and unitid like '%'||(select problemunitcode from qisTESTUNITINFO where groupcode = '25' and useyn = 'Y' and namekor = ?.Q)||'%' and blocknamekor =?.W"
}else{
    select = "select * from QISOCCURBLOCKINFO where useyn = 'Y' and groupcode = '25' and unitid like '%'||(select problemunitcode from qisTESTUNITINFO where groupcode = '25' and useyn = 'Y' and nameeng = ?.Q)||'%' and blocknameeng =?.W"
}
if(!occurrBlock.empty){
    rows = DatabaseUtil.withSql('RESEARCH') { sql ->
        sql.rows(select, [Q:"%${testPlace}%".toString(), W:"${occurrBlock}".toString()])
    }
    if(!rows && projectLanguage != "KR") {
    occurrBlockField.setError("First, select the \"Test Place\", or choose the correct \"Occurr. Block\"!")
    } else if (!rows && projectLanguage == "KR"){
        occurrBlockField.setError("시험처가 변경되었다면 발생 블록 항목도 변경되어야 합니다.")
    }else {    
    occurrBlockField.clearError()
    }
}
/****************************************
* Validation Check End!
****************************************
if(!occurrBlock.empty){
    
    feature.setReadOnly(false) 
    
    getFieldById("customfield_10418").convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisMWFeatureinfo?fqid=" + occurrBlock + "&language=" + projectLanguage,
            query: true,
            formatResponse: "general"
        ]
    ])
}else{
    feature.setReadOnly(true) 
}
*/
/*
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import static groovyx.net.http.Method.*
import groovy.json.JsonSlurper
import net.sf.json.groovy.JsonSlurper
import java.util.stream.Collectors
import java.net.URLEncoder
@BaseScript FieldBehaviours fieldBehaviours
def occurrBlockField = getFieldById("customfield_10604") // 발생 Block Field
def occurrBlockVal = occurrBlockField.value
def testPlace = getFieldById("customfield_10401").value // 시험처(Test Place) Value
String occurrBlock = occurrBlockField.value  // 발생 Block Value
def feature = getFieldById("customfield_10418")     // Feature
def featureVal = feature.value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
def testPlaceItem
*/
/****************************************
* Validation Check Start!
****************************************/
/*
def select = ""
def rows= ""
if (projectLanguage == "KR"){
    select = "select * from QISOCCURBLOCKINFO where useyn = 'Y' and groupcode = '25' and unitnamekor like ?.Q and blocknamekor =?.W"
  }else{
    select = "select * from QISOCCURBLOCKINFO where useyn = 'Y' and groupcode = '25' and unitnameeng like ?.Q and blocknameeng =?.W"
}
if(!occurrBlock.empty){
    rows = DatabaseUtil.withSql('RESEARCH') { sql ->
        sql.rows(select, [Q:"%${testPlace}%".toString(), W:"${occurrBlock}".toString()])
    }
    if(!rows && projectLanguage != "KR") {
       occurrBlockField.setError("First, select the \"Test Place\", or choose the correct \"Occurr. Block\"!")
    } else if (!rows && projectLanguage == "KR"){
         occurrBlockField.setError("시험처가 변경되었다면 발생 블록 항목도 변경되어야 합니다.")
    }else {    
       occurrBlockField.clearError()
    }
}
*/
/*
if(!occurrBlock.empty){
    testPlaceItem = testPlace.toString().bytes.encodeBase64Url()
    def occurrBlockValItem = occurrBlockVal.toString().bytes.encodeBase64Url()
    def featureItem = featureVal.toString().bytes.encodeBase64Url()
    def url = getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisMWOccurBlockinfo?fqid=" + testPlaceItem + "&language=" +projectLanguage+ "&blockName=" + occurrBlockValItem + "&feature=" + featureItem
    def apiurl = url
    log.debug(apiurl)
    def http = new HTTPBuilder(apiurl)
    def rows
    http.request(GET) {
        requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            rows = JSON
        }
        response.failure = { resp ->
            rows =  "Request failed with status ${resp.status}"
        }
    }
    if ( !rows.items.value.contains(occurrBlockVal) && projectLanguage != "KR" ){
        occurrBlockField.setError("First, select the \"Test Place\", or choose the correct \"Occurr. Block\"!")
    }else if ( !rows.items.value.contains(occurrBlockVal) && projectLanguage == "KR"){
         occurrBlockField.setError("시험처가 변경되었다면 발생 블록 항목도 변경되어야 합니다.")
    }else {    
       occurrBlockField.clearError()
    }
}
*/
/****************************************
* Validation Check End!
****************************************/
/*if(!occurrBlock.empty){
    
    feature.setReadOnly(false) 
    
    getFieldById("customfield_10418").convertToSingleSelect([
        ajaxOptions: [
            url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisMWFeatureinfo?fqid=" + testPlace + "&language=" + projectLanguage + "&blockName=" + occurrBlockVal,
            query: true,
            formatResponse: "general"
        ]
    ])
}else{
    //feature.setReadOnly(true) 
}*/
//---------------------------------------------------------------------------------------------------------------------------------------------
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import static groovyx.net.http.Method.*
import groovy.json.JsonSlurper
import net.sf.json.groovy.JsonSlurper
import java.util.stream.Collectors
import java.net.URLEncoder
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def occurrBlockField = getFieldById("customfield_10604") // 발생 Block Field
def occurrBlockVal = occurrBlockField.value
def testPlace = getFieldById("customfield_10401").value // 시험처(Test Place) Value
String occurrBlock = occurrBlockField.value  // 발생 Block Value
def feature = getFieldById("customfield_10418")     // Feature
String featureVal = feature.value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
def testPlaceItem
def issueTypeName = getIssueContext().issueType.name
String gubun = ""
//사업부 분기
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
    //prodValue = prodCodeCf.getValue()
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
/****************************************
* Validation Check Start!
****************************************/
//def select = ""
String featureItem = URLEncoder.encode(featureVal, "UTF-8");
log.debug(occurrBlock);
log.debug(occurrBlockVal);
log.debug(feature);
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisMWOccurBlockinfo?fqid=" + gubun + "&feature=" + featureItem).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisMWOccurBlockinfo?fqid=" + gubun + "&feature=" + featureItem).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
if(!occurrBlock.empty){
    log.debug(select);
    log.debug(select?.getClass().getName());
    
    if ( !select.contains(occurrBlock) && projectLanguage != "KR" ){
        occurrBlockField.setError("First, select the \"Test Place\", or choose the correct \"Occurr. Block\"!")
    }else if ( !select.contains(occurrBlock) && projectLanguage == "KR"){
         occurrBlockField.setError("시험처가 변경되었다면 발생 블록 항목도 변경되어야 합니다.")
    }else {    
       occurrBlockField.clearError()
    }
}


//Test Place
/****************************************
* Custom Field Validation
* Update Date : 2021-04-17
****************************************/
import com.onresolve.scriptrunner.db.DatabaseUtil
import com.opensymphony.workflow.InvalidInputException
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level    
import groovy.transform.BaseScript
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)    
@BaseScript FieldBehaviours fieldBehaviours
def casavalue = getFieldById(getFieldChanged())
def casb = getFieldById("customfield_10411")
String fqid = casavalue.rawValue
String testNameCfValues = casb.getFormValue()
if (getAction()?.name == "Modify" || getAction()?.name == "Clone" || getAction()?.name == "Register"){
    def problemType = getFieldById("customfield_10222") // Open/Draft 필드
    def optionsManager = ComponentAccessor.getOptionsManager()
    def customFieldManager = ComponentAccessor.getCustomFieldManager()
    /*
    def customField = customFieldManager.getCustomFieldObject(problemType.getFieldId())
    def config = customField.getRelevantConfig(getIssueContext())
    def options = optionsManager.getOptions(config)
    */
    def underProblemType = ComponentAccessor.getCustomFieldManager().getCustomFieldObject("customfield_10222")
    def underProblemTypeval = underlyingIssue?.getCustomFieldValue(underProblemType)
    problemType.setFormValue(underProblemTypeval.optionId)
}
def issueTypeName = getIssueContext().issueType.name
String gubun=""
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
/****************************************
* Validation Check Start!
****************************************/
//def select = ""
def testPlace = getFieldById("customfield_10401")
String testPlaceVal = testPlace.getValue()
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestUnitinfo?qdata="+gubun).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestUnitinfo?qdata="+gubun).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !testPlaceVal || !select.contains(testPlaceVal)) {
        casb.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
    }else {
        log.debug(testPlaceVal);    
        casb.clearError()
    }
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
/*
def select = "select so.itemid, so.itemnameeng, so.unitid from QISTESTITEMINFO so inner join QISTESTUNITINFO sp on sp.unitid=so.unitid where so.itemnameeng = '" + testNameCfValues + "' and sp.nameeng = '" + fqid + "'"
def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
    sql.rows(select)
}
if(rows) {
    casb.clearError()
} else {    
    casb.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
}
*/
/****************************************
* Validation Check End!
****************************************/
if (fqid) {
    casb.convertToSingleSelect([    
        ajaxOptions: [
            url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestIteminfo?fqid="+fqid+"&groupcode="+gubun,
            //url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisTestIteminfo?fqid="+fqid+"&groupcode="+gubun,
            query         : true,
            formatResponse: "general"
        ]
    ])
}
/*
else {
    casb.setHidden(true)
    //casb.setReadOnly(true).setDescription("시험처를 변경한 경우 반드시 시험항목을 다시 선택 해야 합니다.")
}
*/


//Test Name
/****************************************
* Custom Field Validation
* Update Date : 2021-04-17
****************************************/
import com.onresolve.scriptrunner.db.DatabaseUtil
import com.opensymphony.workflow.InvalidInputException
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.atlassian.jira.issue.fields.CustomField
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level    
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
import groovy.transform.BaseScript
@BaseScript FieldBehaviours fieldBehaviours
def casbvalue = getFieldById(getFieldChanged())
def casa = getFieldById("customfield_10401")
def casb = getFieldById("customfield_10411")
String fqid = casbvalue.rawValue
String testPlaceCfValues = casa.getFormValue()
def issueTypeName = getIssueContext().issueType.name
String gubun=""
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
/****************************************
* Validation Check Start!
****************************************/
String casbVal = casb.getValue();
log.debug(casbVal);
//def select = ""
String testPlace = URLEncoder.encode(testPlaceCfValues, "UTF-8");
//select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestIteminfo?fqid=" + testPlace + "&groupcode=" + gubun).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisTestIteminfo?fqid=" + testPlace + "&groupcode=" + gubun).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !fqid ||  !select.contains(casbVal)) {
        casb.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
    }else {
        casb.clearError()
    }
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
/*
def select = "select so.itemid, so.itemnameeng, so.unitid from QISTESTITEMINFO so inner join QISTESTUNITINFO sp on sp.unitid=so.unitid where so.itemnameeng = '" + fqid + "' and sp.nameeng = '" + testPlaceCfValues + "' and sp.groupcode = '" + gubun + "'"
def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
    sql.rows(select)
}
if(rows) {
    casb.clearError()
} else {    
    casb.setError("First, select the \"Test Place\", or choose the correct \"Test Name\"!")
}
*/


//Resolution Type2
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import groovy.transform.BaseScript
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import java.net.URLEncoder
import java.net.URLDecoder
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
def resolutionType1 = getFieldById("customfield_12312")
def resolutionType2 = getFieldById(getFieldChanged())
String resolutionType1Value = resolutionType1.value
String resolutionType2Value = resolutionType2.value
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
String type1Val = URLEncoder.encode(resolutionType1Value, "UTF-8");
log.debug(resolutionType1Value);
log.debug(resolutionType2Value);
if (!resolutionType2Value.empty){
    //select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisresolutionType2info?qfid="+type1Val).getText()
    def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisresolutionType2info?qfid=" + type1Val + "&language=" + projectLanguage).openConnection()
    def response = connection.inputStream.getText('UTF-8')
    def jsonSlurper = new JsonSlurper()
    def select = jsonSlurper.parseText(response).toString();
    log.debug(select);
    log.debug(select?.getClass().getName());
    if( !select.contains(resolutionType2Value)) {
        resolutionType2.setError("First, select the \"Resolution Type1\", or choose the correct \"Resolution Type2\"!")
    }else {
        resolutionType2.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// if ( !resolutionType2Value.empty){
//     def issueTypeName = getIssueContext().issueType.name
//     def projectKey = getIssueContext().getProjectObject().getKey()
//     def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
//     projectLanguage = projectLanguage.replace('["', "")
//     projectLanguage = projectLanguage.replace('"]', "")
//     def select
//     //사업부 분기
//     if ( projectLanguage == "KR" ){
//         select = "SELECT SOLTYPENAMEKOR FROM QISSOLTYPEINFO WHERE UPSOLTYPEID = (select SOLTYPEID from QISSOLTYPEINFO where SOLTYPENAMEKOR = '" + resolutionType1Value + "') AND GROUPCODE= '14' AND SOLTYPENAMEKOR = '" + resolutionType2Value + "'"
//     }else{
//         select = "SELECT SOLTYPENAMEENG FROM QISSOLTYPEINFO WHERE UPSOLTYPEID = (select SOLTYPEID from QISSOLTYPEINFO where SOLTYPENAMEENG = '" + resolutionType1Value + "') AND GROUPCODE= '14' AND SOLTYPENAMEENG = '" + resolutionType2Value + "'"
//     }
//     def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select)
//     }
//     if(rows) {
//         resolutionType2.clearError()
//     } else {    
//         resolutionType2.setError("First, select the \"Resolution Type1\", or choose the correct \"Resolution Type2\"!")
//     }
// }
/****************************************
* Validation Check End!
****************************************/
 
//Resolution Screen - NW_DEFECT_Fr_PLM
import java.util.ArrayList
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import static groovyx.net.http.Method.*
import groovy.json.JsonSlurper
import net.sf.json.groovy.JsonSlurper
import java.util.stream.Collectors
import groovy.sql.GroovyRowResult
import java.net.URLEncoder
import org.apache.log4j.Logger
import org.apache.log4j.Level 

def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
def customFieldManager = ComponentAccessor.getCustomFieldManager()
def PTField = customFieldManager.getCustomFieldObject("customfield_10222")
def problemType = underlyingIssue?.getCustomFieldValue(PTField).toString()
def causeTypeField = getFieldById("customfield_10609")
def causeTypeFieldFieldId = customFieldManager.getCustomFieldObject(causeTypeField.getFieldId())
def causefieldConfig = causeTypeFieldFieldId.getRelevantConfig(getIssueContext())
def subsystemField = getFieldById("customfield_12006")
def resolutionTargetDataField = getFieldById("customfield_12007")
def resolutionSWVerField = getFieldById("customfield_10434")
def noncheckreasonField = getFieldById("customfield_12009")
def resolutionStepField = getFieldById("customfield_12010")
//def defectTypeField = getFieldById("customfield_10827")
def clNumberField = getFieldById("customfield_12101")
def portNumberField = getFieldById("customfield_12102")
def errorBlockField = getFieldById("customfield_10612")
def errorTypeField = getFieldById("customfield_12012")
def resolutionTypeField = getFieldById("customfield_10610")
def type
def optionsManager = ComponentAccessor.getOptionsManager()
def newDefectTypeField = getFieldById("customfield_12110")
def newDefectTypeFieldId = customFieldManager.getCustomFieldObject(newDefectTypeField.getFieldId())
def fieldConfig = newDefectTypeFieldId.getRelevantConfig(getIssueContext())
def rows 
def rt = [:]
def newValue = [:]
def parentOption
def parentOptions
def childOption
def childOptions
//def clNumberField

if ( problemType != "S/W" ){
    subsystemField.setHidden(false)
    //resolutionTargetDataField.setHidden(true)
    resolutionSWVerField.setHidden(true)
    noncheckreasonField.setHidden(true)
    resolutionStepField.setHidden(true)
    newDefectTypeField.setHidden(true)
    causeTypeField.setHidden(true)
    clNumberField.setHidden(true)
    portNumberField.setHidden(true)
    resolutionTypeField.setHidden(true)
    errorTypeField.setRequired(true)
}else{
    //subsystemField.setHidden(false)
    resolutionStepField.setHidden(false)
    newDefectTypeField.setHidden(false)
    clNumberField.setHidden(false)
    //errorBlockField.setHidden(false)
    resolutionTypeField.setHidden(false)
    subsystemField.setRequired(true)
    resolutionStepField.setRequired(true)
    newDefectTypeField.setRequired(true)
    clNumberField.setRequired(true)
    errorBlockField.setHidden(true)
    errorTypeField.setHidden(true)
    errorBlockField.setRequired(false)
    def descFieldObj = customFieldManager.getCustomFieldObject("customfield_12102")
    portNumberField.setReadOnly(true)
    def defaultValue = "p4_1667"
        if (!underlyingIssue?.getCustomFieldValue(descFieldObj)) { 
        portNumberField.setFormValue(defaultValue)
        
    }
}
// Project 언어 가져오기
def projectLanguage = getFieldById("customfield_10847").value // 프로젝트 언어 Value
//SubSystemField를 DD정보값 가져오기
subsystemField.convertToSingleSelect(
     [ajaxOptions: [
        url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSubSystemInfo?fqid=" + projectLanguage,
        //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisSubSystemInfo?fqid=" + projectLanguage,
        query: true,
        formatResponse: "general"
    ]
])
//미검출사유Field DD정보값 가져오기
noncheckreasonField.convertToSingleSelect(
     [ajaxOptions: [
        url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisNotDefectionInfo?fqid=" + projectLanguage,
        //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisNotDefectionInfo?fqid=" + projectLanguage,
        query: true,
        formatResponse: "general"
    ]
])
//오류형태 Field DD정보값 가져오기
if( problemType == "Circuit" ){
    type = "HW"
}else if( problemType == "Mech." ){
    type = "MW"
}
errorTypeField.convertToSingleSelect(
     [ajaxOptions: [
        url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisErrorTypeInfo?fqid=" + projectLanguage + "&type=" + type,
        //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisErrorTypeInfo?fqid=" + projectLanguage + "&type=" + type,
        query: true,
        formatResponse: "general"
    ]
])
//resolutionstep Field DD정보값 가져오기
resolutionStepField.convertToSingleSelect(
     [ajaxOptions: [
        url : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisResolutionStepInfo?fqid=" + projectLanguage,
        //url : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisResolutionStepInfo?fqid=" + projectLanguage,
        query: true,
        formatResponse: "general"
    ]
])
//Defect Type. Cascading 의 값이 업데이트 될 때마다 Option 값을 추가할 수 있도록 구성.
def url = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newUpDefectTypeID")
    def apiurl = url
    //log.debug(apiurl)
    def http = new HTTPBuilder(apiurl)
    http.request(GET) {
       requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            rt = JSON
        }
        response.failure = { resp ->
            rt =  "Request failed with status ${resp.status}"
        }
    }
    
//-------------------------------------------------------------------------------------------
// DatabaseUtil.withSql('RESEARCH') { sql ->
//  rows = sql.rows("SELECT DISTINCT UPDEFECTTYPEID  FROM QISDEFECTTYPEINFO q")
    
//     rt = [
//         items : rows.collect { GroovyRowResult row ->
//         [
//             value:row.get("UPDEFECTTYPEID"),
//             html:row.get("UPDEFECTTYPEID"),
//             label:row.get("UPDEFECTTYPEID"),                                
//         ]
//     }]
// }
//-------------------------------------------------------------------------------------------
for ( def value in rt.items.value ){
    parentOption = ComponentAccessor.getOptionsManager().getOptions(fieldConfig)?.find { it.toString() == value }
    if ( parentOption == null ){
        optionsManager.createOption(fieldConfig, parentOption, null, value)
        parentOption = ComponentAccessor.getOptionsManager().getOptions(fieldConfig)?.find { it.toString() == value }
    }
    
    String params = URLEncoder.encode(value, "UTF-8");
    url = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newUpDefectTypeName?typeid=" + params)
    
    apiurl = url
    http = new HTTPBuilder(apiurl)
    http.request(GET) {
       requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            rt = JSON
        }
        response.failure = { resp ->
            rt =  "Request failed with status ${resp.status}"
        }
    }
//-------------------------------------------------------------------------------------------   
    // DatabaseUtil.withSql('RESEARCH') { sql ->
    //  rows = sql.rows("SELECT DEFECTTYPENAMEKOR FROM QISDEFECTTYPEINFO q WHERE UPDEFECTTYPEID = ?.Q", [Q:"${value}".toString()])
    //  rt = [
    //          items : rows.collect { GroovyRowResult row ->
    //             [
    //                 value:row.get("DEFECTTYPENAMEKOR"),
    //                 html:row.get("DEFECTTYPENAMEKOR"),
    //                 label:row.get("DEFECTTYPENAMEKOR"),                                
    //             ]
    //      }]
    //  }
//-------------------------------------------------------------------------------------------   
    for( def values in rt.items.value ) {
        childOption = ComponentAccessor.getOptionsManager().findByParentId(parentOption?.optionId)?.find { it.toString() == values }
        
        if ( childOption == null ){
            optionsManager.createOption(fieldConfig, parentOption?.optionId, 1, values)
        }
    }   
}
//Cause Type의 child 값 가져오기 Parent는 하드코딩 되어 있어 배열로 설정함.
ArrayList<String> causeTypeParent = new ArrayList<String>(["1-Requirement_ERROR",  "2-Design_ERROR", "3-Implementation_ERROR", "Missing"])
for (def parentValue in causeTypeParent){
    parentOption = ComponentAccessor.getOptionsManager().getOptions(causefieldConfig)?.find { it.toString() == parentValue }
    String params = URLEncoder.encode(parentValue, "UTF-8");
    url = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newSolcauseTypeName?stypeid=" + params)
    
    apiurl = url
    http = new HTTPBuilder(apiurl)
    http.request(GET) {
       requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            rt = JSON
        }
        response.failure = { resp ->
            rt =  "Request failed with status ${resp.status}"
        }
    }
//-------------------------------------------------------------------------------------------
    // DatabaseUtil.withSql('RESEARCH') { sql ->
    //  rows = sql.rows("SELECT SOLCAUSETYPENAMEKOR  FROM QISSOLCAUSETYPEINFO q WHERE UPSOLCAUSETYPEID = ?.Q", [Q:"${parentValue}".toString()])
    //  rt = [
    //         items : rows.collect { GroovyRowResult row ->
    //             [
    //                 value:row.get("SOLCAUSETYPENAMEKOR"),
    //                 html:row.get("SOLCAUSETYPENAMEKOR"),
    //                 label:row.get("SOLCAUSETYPENAMEKOR"),                                
    //             ]
    //         }]
    //     }
//-------------------------------------------------------------------------------------------        
    for( def values in rt.items.value ) {
        childOption = ComponentAccessor.getOptionsManager().findByParentId(parentOption?.optionId)?.find { it.toString() == values }
        if ( childOption == null ){
            optionsManager.createOption(causefieldConfig, parentOption?.optionId, 1, values)
        }
    }
}


//Countermeasure Category
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)        
import groovy.transform.BaseScript
@BaseScript FieldBehaviours fieldBehaviours
def comboCfavalue = getFieldById(getFieldChanged())
String fqid=comboCfavalue.rawValue
def comboCfb = getFieldById("customfield_10606")
String comboCfbValues = comboCfb.getFormValue()
def issueTypeName = getIssueContext().issueType.name
String gubun="11"
//사업부 분기
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
    gubun="11"
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
    gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
    gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
    gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
    gubun="XK"
}
/****************************************
* Validation Check Start!
****************************************/
//def select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSolutioninfo?qdata=" + gubun).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisSolutioninfo?qdata=" + gubun).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
log.debug(select);
log.debug(select?.getClass().getName());
if( !select.contains(fqid) || !comboCfbValues) {
    comboCfb.setError("First, select the \"Countermeasure Category\", or choose the correct \"Detailed Block\"!")
}else {    
    comboCfb.clearError()
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "select qdbinfo.ida2a2, qdbinfo.blocknameeng from QISDETAILBLOCKINFO qdbinfo inner join QISSOLUTIONINFO qsinfo on qsinfo.solveid=qdbinfo.solveid where qsinfo.solvenameeng  = '" + fqid + "' and qdbinfo.blocknameeng = '" + comboCfbValues + "'"
// def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//     sql.rows(select)
// }
// if(rows) {
//     comboCfb.clearError()
// } else {    
//     comboCfb.setError("First, select the \"Countermeasure Category\", or choose the correct \"Detailed Block\"!")
// }
/****************************************
* Validation Check End!
****************************************/
if (fqid) {
    comboCfb.convertToSingleSelect([    
        ajaxOptions: [
            url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisDetailBlockinfo?fqid="+fqid,
            //url           : getBaseUrl() + "/rest/scriptrunner/latest/custom/eventQisDetailBlockinfo?fqid="+fqid,
            query         : true,
            formatResponse: "general"
        ]
    ])
    comboCfb.setRequired(true)
}
/*
else {
    comboCfb.setHidden(false)
}
*/


//Detailed Block
import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.onresolve.jira.groovy.user.FieldBehaviours
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)        
import groovy.transform.BaseScript
@BaseScript FieldBehaviours fieldBehaviours
def comboCfbvalue = getFieldById(getFieldChanged())
String fqid=comboCfbvalue.rawValue
def comboCfa = getFieldById("customfield_10605")
String comboCfaValues = comboCfa.getFormValue()
def comboCfb = getFieldById("customfield_10606")
/****************************************
* Validation Check Start!
****************************************/
String cCategory = URLEncoder.encode(comboCfaValues, "UTF-8");
log.debug(fqid);
//def select = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisDetailBlockinfo?fqid=" + cCategory).getText()
def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisDetailBlockinfo?fqid=" + cCategory).openConnection()
def response = connection.inputStream.getText('UTF-8')
def jsonSlurper = new JsonSlurper()
def select = jsonSlurper.parseText(response).toString();
log.debug(select);
log.debug(select?.getClass().getName());
if( !select.contains(fqid) || !fqid ) {
    comboCfb.setError("First, select the \"Countermeasure Category\", or choose the correct \"Detailed Block\"!")
} else {
    comboCfb.clearError()
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "select qdbinfo.ida2a2, qdbinfo.blocknameeng from QISDETAILBLOCKINFO qdbinfo inner join QISSOLUTIONINFO qsinfo on qsinfo.solveid=qdbinfo.solveid where qsinfo.solvenameeng  = '" + comboCfaValues + "' and qdbinfo.blocknameeng = '" + fqid + "'"
// def rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//     sql.rows(select)
// }
// if(rows) {
//     comboCfb.clearError()
// } else {    
//     comboCfb.setError("First, select the \"Countermeasure Category\", or choose the correct \"Detailed Block\"!")
// }
/****************************************
* Validation Check End!
****************************************/


//Resolve Option(Low)
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.UserLocaleStore
import com.onresolve.scriptrunner.db.DatabaseUtil
import groovy.json.JsonSlurper
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
@BaseScript FieldBehaviours fieldBehaviours
String resolveOptionMedium = getFieldById("customfield_10833").value    // Resolve Option(중) Value
def resolveOptionSmallField = getFieldById("customfield_10832") // Resolve Option(소) Field
String resolveOptionSmall = resolveOptionSmallField.value // Resolve Option(소) Value
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
/****************************************
* Validation Check Start!
****************************************/
if(resolveOptionMedium == ""){
    resolveOptionSmallField.setReadOnly(true)
}
String resolveOptionMediumVal = URLEncoder.encode(resolveOptionMedium, "UTF-8");
log.debug(resolveOptionMediumVal);
log.debug(resolveOptionSmall);
if(!resolveOptionSmall.empty){
    def connection = new URL(getBaseUrl() + "/rest/scriptrunner/latest/custom/newEventQisResolveOptioninfo?language=" + projectLanguage + "&mid=" + resolveOptionMediumVal).openConnection()
    def response = connection.inputStream.getText('UTF-8')
    def jsonSlurper = new JsonSlurper()
    def select = jsonSlurper.parseText(response).toString();
    log.debug(select);
    log.debug(select?.getClass().getName());
    
    if(!select.contains(resolveOptionSmall) && !projectLanguage == "KR") {
        resolveOptionSmallField.setError("First, select the \"Resolve Option(Mid)\", or choose the correct \"Resolve Option(Low)\"!")
    } else if (!select.contains(resolveOptionSmall) && projectLanguage == "KR"){
        resolveOptionSmallField.setError("Resolve Option(중)이 변경되었다면 Resolve Option(소)도 변경되어야 합니다.")
    }else {    
       resolveOptionSmallField.clearError()
    }
}
//DB 조회에서 Rest 호출로 구조 변경.
//---------------------------------------------------------------------------------------------------------------------------------------------
// def select = "" 
// def rows = ""
// if (projectLanguage == "KR"){
//      select = "select resolvestatusnamekor from qisresolveStatusinfo where useyn = 'Y' and optionlevel = 'LOW' and groupcode = '25' and upresolvenamekor = ?.Q and resolvestatusnamekor = ?.W"
//   }else{
//     select = "select resolvestatusnameeng from qisresolveStatusinfo where useyn = 'Y' and optionlevel = 'LOW' and groupcode = '25' and upresolvenameeng = ?.Q and resolvestatusnameeng = ?.W"
// }
// if(!resolveOptionSmall.empty){
//     rows = DatabaseUtil.withSql('RESEARCH') { sql ->
//         sql.rows(select, [Q:"${resolveOptionMedium}".toString(), W:"${resolveOptionSmall}".toString()])
//     }
    
//     if(!rows && !projectLanguage == "KR") {
//         resolveOptionSmallField.setError("First, select the \"Resolve Option(Mid)\", or choose the correct \"Resolve Option(Low)\"!")
//     } else if (!rows && projectLanguage == "KR"){
//         resolveOptionSmallField.setError("Resolve Option(중)이 변경되었다면 Resolve Option(소)도 변경되어야 합니다.")
//     }else {    
//        resolveOptionSmallField.clearError()
//     }
// }


//Quality Manager
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Logger
import org.apache.log4j.Level
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import groovyx.net.http.ContentType
import static groovyx.net.http.Method.*
@BaseScript FieldBehaviours fieldBehaviours
def log = Logger.getLogger(getClass())
log.setLevel(Level.DEBUG)
def currentUser = ComponentAccessor.jiraAuthenticationContext.getLoggedInUser()
String userId = currentUser.getUsername()
def groupManager = ComponentAccessor.groupManager
def preCompleteUser = getFieldById("customfield_12902") //완료검토자
def remark = getFieldById("customfield_12801") // 의견
def description = ""
// Project 언어 가져오기
def projectKey = getIssueContext().getProjectObject().getKey()
def projectLanguage = new URL (getBaseUrl() + "/rest/scriptrunner/latest/custom/projectLanguage?jiraprojectkey=" + projectKey).getText()
projectLanguage = projectLanguage.replace('["', "")
projectLanguage = projectLanguage.replace('"]', "")
if(projectLanguage == "KR") {
    description = "Completed test reports will be forwarded to PLM after confirmation by the quality manager."
}else{
    description = "완료한 시험보고서는 현장관리자의 확인 후 PLM으로 전달됩니다."
}
def issueTypeName = getIssueContext().issueType.name
String gubun=""
if (issueTypeName=="DEFECT_VD_Fr_PLM" || issueTypeName=="DEFECT_VD_To_PLM"){
   gubun="11"
}else if(issueTypeName=="DEFECT_NW_Fr_PLM" || issueTypeName=="DEFECT_NW_To_PLM"){
   gubun="26"
}else if(issueTypeName=="DEFECT_MOBILE_Fr_PLM" || issueTypeName=="DEFECT_MOBILE_To_PLM"){
   gubun="25"
}else if(issueTypeName=="DEFECT_DA_Fr_PLM" || issueTypeName=="DEFECT_DA_To_PLM"){
   gubun="14"
}else if(issueTypeName=="DEFECT_HME_Fr_PLM" || issueTypeName=="DEFECT_HME_To_PLM"){
   gubun="XK"
}
def getUserSubcontrator(String gubun, userId){
//def getUserSubcontrator(String userId){
    def url = ComponentAccessor.getApplicationProperties().getString("jira.baseurl") + "/rest/scriptrunner/latest/custom/newUserSubcontractCheck?groupCode=$gubun&username=$userId"
    //def url = ComponentAccessor.getApplicationProperties().getString("jira.baseurl") + "/rest/scriptrunner/latest/custom/userSubcontractCheck?username=$userId"
    def http = new HTTPBuilder(url)
    http.request(GET) {
        requestContentType = ContentType.JSON
        response.success = { resp, JSON ->
            return JSON
        }
        response.failure = { resp ->
            return "Request failed with status ${resp.status}"
        }
    }
}
//관리자, 품질관리자(현장관리자) 여부 확인
def userGroups = groupManager.getGroupNamesForUser(currentUser)
def isAdmin = false
for (group in userGroups){
    log.debug(group)
    if(group.contains("administrators") || group.contains("품질관리자")){
        isAdmin = true
    }
}
if (isAdmin){ //관리자(jira관리자or품질관리자)일 경우
   preCompleteUser.setRequired(false)
   preCompleteUser.setHidden(true)
   preCompleteUser.setDescription("")
   remark.setHidden(true)
}else {
    def subConResult = getUserSubcontrator(userId)[0]
    log.debug("하도급 Y/N: $subConResult")
    if(subConResult == "Y") { //하도급 사용자이며 관리자가 아닐 경우              
      preCompleteUser.setRequired(true)
      preCompleteUser.setHidden(false)
      preCompleteUser.setDescription(description)
      remark.setHidden(true)
      remark.setFormValue("")
    }else{ //하도급 사용자가 아닐 경우
      preCompleteUser.setRequired(false)
      preCompleteUser.setHidden(true)
      preCompleteUser.setDescription("")
      remark.setHidden(true)
    }
}


//Mobile_협력사 사용자 검색 api방식 변경
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import com.onresolve.scriptrunner.db.DatabaseUtil
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovy.json.JsonBuilder
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.util.stream.Collectors
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import java.sql.SQLException
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass());
log.setLevel(Level.DEBUG);
@BaseScript CustomEndpointDelegate delegate;
newUserSearch(httpMethod:"GET") {
    MultivaluedMap queryParams->
        def userName = queryParams.getFirst("userName")as String;
        def pageNum  = queryParams.getFirst("pageNum")as String;
        def pageSize = queryParams.getFirst("pageSize")as String;
        def issueType  = queryParams.getFirst("issueType")as String;
        def component = queryParams.getFirst("component")as String;
        def userNames = "";
        def rows = null;
        /********************************************************************************
         * JIRA ACTIVE 사용자 조회 쿼리
         * ex) khansi9,redbat04,trkang07,
         ********************************************************************************/
        try {
            def datas = DatabaseUtil.withSql('RESEARCH') { sql ->
                rows = sql.rows(""" 
                    SELECT LISTAGG(U.USER_NAME,',') WITHIN GROUP(ORDER BY U.USER_NAME) || ',' AS USER_NAMES
                      /* FROM CPCDEVJIRA3.CWD_USER U */ /* 개발 */
                      FROM CPCJIRA.CWD_USER U /* 운영 */
                     WHERE ACTIVE = 1
                       AND ( U.LOWER_DISPLAY_NAME LIKE '%' || LOWER(?.USER_NAME) || '%'
                             OR U.LOWER_USER_NAME LIKE '%' || LOWER(?.USER_NAME) || '%'
                             OR EXISTS ( SELECT 1
                                           /* 개발 */
                                           /*
                                           FROM CPCDEVJIRA3.CWD_MEMBERSHIP M
                                           JOIN CPCDEVJIRA3.CWD_DIRECTORY D
                                             ON M.DIRECTORY_ID = D.ID
                                           JOIN CPCDEVJIRA3.CWD_GROUP G
                                             ON G.ID = M.PARENT_ID
                                           JOIN CPCDEVJIRA3.APP_USER A
                                             ON A.LOWER_USER_NAME = U.LOWER_USER_NAME
                                           */
                                           /* 운영 */
                                           FROM CPCJIRA.CWD_MEMBERSHIP M
                                           JOIN CPCJIRA.CWD_DIRECTORY D
                                             ON M.DIRECTORY_ID = D.ID
                                           JOIN CPCJIRA.CWD_GROUP G
                                             ON G.ID = M.PARENT_ID
                                           JOIN CPCJIRA.APP_USER A
                                             ON A.LOWER_USER_NAME = U.LOWER_USER_NAME
                                          WHERE D.active = '1'
                                            AND U.ID = M.CHILD_ID
                                            AND U.DIRECTORY_ID = M.DIRECTORY_ID
                                            AND G.GROUP_NAME != 'jira-software-users'
                                            AND G.GROUP_NAME != 'jira-active'
                                            AND G.LOWER_GROUP_NAME LIKE '%' || LOWER(?.USER_NAME) || '%' )
                            )
                """, [USER_NAME:"${userName}".toString()]);
            }
            log.debug( "datas : " + datas);
            if ( datas != null && datas.size() > 0 ) {
                rows.collect { GroovyRowResult row ->
                    def _item = [:];
                    userNames = row.get("USER_NAMES");
                };
            }
            log.debug( "userNames : " + userNames);
        } catch(Exception e) {
            log.error(e);
        }
        /********************************************************************************
         * cpcex API 요청
         ********************************************************************************
         * 개발 : CPCOP.cpcvendor cv, CPCOP.cpcsubcontractor cs, CPCOP.umsuser uu, CPCOP.QisModelDetailInfo qd
         * 운영 : CPCEX.cpcvendor cv, CPCEX.cpcsubcontractor cs, CPCEX.umsuser uu, CPCEX.QisModelDetailInfo qd
         ********************************************************************************/
        def rt = [:];
        def pageStart = "";
        def pageEnd = "";
        
        try {
            if ( !pageNum ) pageNum = "1";
            if ( !pageSize ) pageSize = "10";
            if(pageNum != "1") {
                pageStart = ((pageNum.toInteger()-1)*pageSize.toInteger()) + 1;
                pageEnd = (pageSize.toInteger() * pageNum.toInteger()).toString();
            } else {
                pageStart = pageNum;
                pageEnd = pageSize;
            }
            def data = null;
            def userNameEnc = URLEncoder.encode(userName, "UTF-8");
            def issueTypeEnc = URLEncoder.encode(issueType, "UTF-8");
            def componentEnc = URLEncoder.encode(component, "UTF-8");
            def userNamesEnc = URLEncoder.encode(userNames, "UTF-8");
            // def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisUserSearch.do"; // 개발
            def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisUserSearch.do"; // 운영
            def params = "?pageStart=${pageStart}&pageEnd=${pageEnd}&userName=${userName}&issueType=${issueType}&component=${component}&userNames=${userNames}";
            def paramsEnc = "?pageStart=${pageStart}&pageEnd=${pageEnd}&userName=${userNameEnc}&issueType=${issueTypeEnc}&component=${componentEnc}&userNames=${userNamesEnc}";
            def apiurl = url + paramsEnc;
            log.debug("params : " + params);
            log.debug("apiurl : " + apiurl);
            def http = new HTTPBuilder(apiurl);
 
            http.request(GET) {
                requestContentType = ContentType.JSON;
                response.success = { resp, JSON ->
                    data = JSON;
                    log.debug("data : " + data);
                }
                response.failure = { resp ->
                    data = "Request failed with status ${resp.status}";
                }
            }
            def items = [];
            def totalHits = 0;
            try {
                data.each { row ->
                    def _item = [:];
                    _item.userkoname        = row['DECODE_NAME'];
                    _item.userengname       = row['DECODE_ENG_NAME'];
                    _item.userid            = row['USERID'];
                    _item.email             = row['EMAIL'];
                    _item.companykorname    = row['COMPANY_KOR_NAME'];
                    _item.companyengname    = row['COMPANY_ENG_NAME'];
                    _item.epid              = row['EPID'];
                    _item.deptengname       = row['DEPT_ENG_NAME'];
                    _item.deptkorname       = row['DEPT_KOR_NAME'];
                    items.add( _item );
                    totalHits = row.TOTAL;
                }
            } catch (Exception e) {
                log.error(e);
                rt = [:];
            }
            rt = [ totalHits : totalHits, items : items ];
            log.debug("rt : " + rt);
        } catch (Exception e) {
            log.error(e);
        } finally {
            log.debug("userSearch OK");
        }
        
    return Response.ok(new JsonBuilder(rt).toString()).build();
}


//CPCex 사용자 여부 조회 api방식 변경
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.database.DatabaseConfigurationManager
import com.atlassian.jira.config.database.JdbcDatasource
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import com.onresolve.scriptrunner.db.DatabaseUtil
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovy.json.JsonBuilder
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.BaseScript
import javax.ws.rs.core.MultivaluedMap
import javax.ws.rs.core.Response
import java.util.stream.Collectors
import java.net.URLEncoder
import java.net.URLDecoder
import java.sql.Driver
import java.sql.SQLException
import org.apache.log4j.Logger
import org.apache.log4j.Level
def log = Logger.getLogger(getClass());
log.setLevel(Level.DEBUG);
@BaseScript CustomEndpointDelegate delegate;
/****************************************************
    2023.08.09  로그인 사용자 체크용으로 
                jira 사용자이며, cpcex 사용자여부 체크
    ex)             
    {
        "USER_NAME": "vman-o1",
        "ACTIVE": 1,                // Jira 사용자 여부 :  1 = active, 0 = inactive
        "CPCEXUSER": 1              // cpcex 사용자 여부 : 1 이상이면 cpcex 사용자 
    }
*****************************************************/
newUserSearchCpcex(httpMethod:"GET") {
    MultivaluedMap queryParams->
        def userName = queryParams.getFirst("userName")as String;
        def cpcexCnt = 0;
        def rt = [:];
        log.debug("userName은 ${userName}");
        /********************************************************************************
         * cpcex 사용자여부 체크 API 요청
         ********************************************************************************
         * 개발 : CPCOP.umsuser uu
         * 운영 : CPCEX.umsuser uu
         ********************************************************************************/
        try {
            def data = null;
            // def url = "http://10.40.86.225/Windchill/jira/cpcex/getQisUserCheck.do"; // 개발
            def url = "http://cpdm.sec.samsung.net/Windchill/jira/cpcex/getQisUserCheck.do"; // 운영
            def params = "?userName=${userName}";
            def apiurl = url + params;
            log.debug("params : " + params);
            log.debug("apiurl : " + apiurl);
            def http = new HTTPBuilder(apiurl);
 
            http.request(GET) {
                requestContentType = ContentType.JSON;
                response.success = { resp, JSON ->
                    data = JSON;
                    log.debug("data : " + data);
                }
                response.failure = { resp ->
                    data = "Request failed with status ${resp.status}";
                }
            }
            cpcexCnt = data['CNT'];
            log.debug("cpcexCnt : " + cpcexCnt);
        } catch (Exception e) {
            log.error(e);
        }
        /********************************************************************************
         * JIRA ACTIVE 사용자 체크
         ********************************************************************************/
        try {
            def datas = DatabaseUtil.withSql('RESEARCH') { sql ->
                sql.rows("""
                    SELECT USER_NAME,
                           ACTIVE, ${cpcexCnt} AS CPCEXUSER,
                           DIRECTORY_ID
                      /* FROM CPCDEVJIRA3.CWD_USER */ cu /* 개발 */
                      FROM CPCJIRA.CWD_USER cu /* 운영 */
                     WHERE user_name = ${userName}
                     ORDER BY DIRECTORY_ID
                """);
            }
            log.debug( "jira user check > datas > ${datas}");
            if ( datas != null && datas.size() > 0 ) {
                rt = datas[0];
            }
        } catch(Exception e) {
            log.error(e);
        } finally {
            log.debug("userSearchCpcex OK");
        }
    return Response.ok(new JsonBuilder(rt).toString()).build();
}
 